"""
B√ÄI T·∫¨P 2: V√íNG L·∫∂P WHILE V√Ä USER INPUT
======================================

B√†i t·∫≠p n√†y t·∫≠p trung v√†o while loops k·∫øt h·ª£p v·ªõi input() v√† validation.
G·ªìm 10 ph·∫ßn t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao.

Y√™u c·∫ßu:
- Hi·ªÉu r√µ c√°ch ho·∫°t ƒë·ªông c·ªßa while
- Bi·∫øt c√°ch tr√°nh infinite loops
- Th√†nh th·∫°o input validation
- X√¢y d·ª±ng ƒë∆∞·ª£c menu systems

Th·ªùi gian ∆∞·ªõc t√≠nh: 120-150 ph√∫t
"""

print("üéØ B√ÄI T·∫¨P 2: V√íNG L·∫∂P WHILE & USER INPUT")
print("=" * 50)

# =============================================================================
# PH·∫¶N A: WHILE C∆† B·∫¢N V·ªöI COUNTERS
# =============================================================================

print("\nüìñ PH·∫¶N A: WHILE C∆† B·∫¢N V·ªöI COUNTERS")
print("-" * 40)

# A.1. V√≠ d·ª•: While v·ªõi counter tƒÉng d·∫ßn
print("A.1. V√≠ d·ª•: ƒê·∫øm t·ª´ 1 ƒë·∫øn 5")
count = 1
while count <= 5:
    print(f"ƒê·∫øm: {count}")
    count += 1  # QUAN TR·ªåNG: Ph·∫£i tƒÉng counter
print("K·∫øt th√∫c ƒë·∫øm!")

# A.2. V√≠ d·ª•: While v·ªõi counter gi·∫£m d·∫ßn
print("\nA.2. V√≠ d·ª•: ƒê·∫øm ng∆∞·ª£c t·ª´ 5 v·ªÅ 1")
countdown = 5
while countdown >= 1:
    print(f"C√≤n: {countdown}")
    countdown -= 1
print("üöÄ H·∫øt gi·ªù!")

# A.3. V√≠ d·ª•: While v·ªõi ƒëi·ªÅu ki·ªán ph·ª©c t·∫°p
print("\nA.3. V√≠ d·ª•: T√≠nh t·ªïng ƒë·∫øn khi > 100")
total = 0
current = 1
while total <= 100:
    total += current
    print(f"C·ªông {current}, t·ªïng = {total}")
    current += 1
print(f"K·∫øt qu·∫£: T·ªïng = {total}")

# A.4. V√≠ d·ª•: While v·ªõi boolean flag
print("\nA.4. V√≠ d·ª•: S·ª≠ d·ª•ng boolean flag")
running = True
step = 0
while running:
    step += 1
    print(f"B∆∞·ªõc {step}")
    if step >= 3:
        running = False  # Thay ƒë·ªïi flag ƒë·ªÉ tho√°t
print("Ho√†n th√†nh!")

print("\nüèÉ‚Äç‚ôÇÔ∏è B√ÄI T·∫¨P PH·∫¶N A:")
print("1. ƒê·∫øm t·ª´ 10 ƒë·∫øn 20 b·∫±ng while")
print("2. ƒê·∫øm ng∆∞·ª£c t·ª´ 25 v·ªÅ 15")
print("3. T√≠nh t·ªïng c√°c s·ªë t·ª´ 1 ƒë·∫øn 50")
print("4. In c√°c s·ªë ch·∫µn t·ª´ 2 ƒë·∫øn 20")
print("5. T√≠nh 2^10 b·∫±ng while loop")

# Vi·∫øt code b√†i t·∫≠p ·ªü ƒë√¢y:
print("\n--- B√ÄI L√ÄM PH·∫¶N A ---")

# B√†i 1: ƒê·∫øm t·ª´ 10 ƒë·∫øn 20


# B√†i 2: ƒê·∫øm ng∆∞·ª£c t·ª´ 25 v·ªÅ 15


# B√†i 3: T√≠nh t·ªïng t·ª´ 1 ƒë·∫øn 50


# B√†i 4: In s·ªë ch·∫µn t·ª´ 2 ƒë·∫øn 20


# B√†i 5: T√≠nh 2^10


# =============================================================================
# PH·∫¶N B: INPUT VALIDATION C∆† B·∫¢N
# =============================================================================

print("\nüìñ PH·∫¶N B: INPUT VALIDATION C∆† B·∫¢N")
print("-" * 40)

# B.1. V√≠ d·ª•: Validation s·ªë nguy√™n
print("B.1. V√≠ d·ª•: Nh·∫≠p s·ªë nguy√™n h·ª£p l·ªá")
while True:
    try:
        number = int(input("Nh·∫≠p m·ªôt s·ªë nguy√™n: "))
        print(f"‚úÖ B·∫°n ƒë√£ nh·∫≠p: {number}")
        break  # Tho√°t loop khi input h·ª£p l·ªá
    except ValueError:
        print("‚ùå L·ªói! Vui l√≤ng nh·∫≠p s·ªë nguy√™n!")

# B.2. V√≠ d·ª•: Validation s·ªë d∆∞∆°ng
print("\nB.2. V√≠ d·ª•: Nh·∫≠p s·ªë d∆∞∆°ng")
while True:
    try:
        positive_num = float(input("Nh·∫≠p s·ªë d∆∞∆°ng: "))
        if positive_num > 0:
            print(f"‚úÖ S·ªë d∆∞∆°ng h·ª£p l·ªá: {positive_num}")
            break
        else:
            print("‚ùå S·ªë ph·∫£i l·ªõn h∆°n 0!")
    except ValueError:
        print("‚ùå Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá!")

# B.3. V√≠ d·ª•: Validation yes/no
print("\nB.3. V√≠ d·ª•: Validation yes/no")
while True:
    answer = input("B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c? (yes/no): ").lower()
    if answer in ['yes', 'y', 'c√≥']:
        print("‚úÖ Ti·∫øp t·ª•c...")
        break
    elif answer in ['no', 'n', 'kh√¥ng']:
        print("‚úÖ D·ª´ng l·∫°i...")
        break
    else:
        print("‚ùå Vui l√≤ng nh·∫≠p 'yes' ho·∫∑c 'no'!")

print("\nüèÉ‚Äç‚ôÇÔ∏è B√ÄI T·∫¨P PH·∫¶N B:")
print("1. Nh·∫≠p tu·ªïi (1-120)")
print("2. Nh·∫≠p ƒëi·ªÉm s·ªë (0-10)")
print("3. Nh·∫≠p t√™n (kh√¥ng ƒë∆∞·ª£c r·ªóng)")
print("4. Nh·∫≠p email (ph·∫£i c√≥ @ v√† .)")
print("5. Nh·∫≠p m·∫≠t kh·∫©u (√≠t nh·∫•t 6 k√Ω t·ª±)")

# Vi·∫øt code b√†i t·∫≠p ·ªü ƒë√¢y:
print("\n--- B√ÄI L√ÄM PH·∫¶N B ---")

# B√†i 1: Nh·∫≠p tu·ªïi h·ª£p l·ªá (1-120)


# B√†i 2: Nh·∫≠p ƒëi·ªÉm s·ªë (0-10)


# B√†i 3: Nh·∫≠p t√™n kh√¥ng r·ªóng


# B√†i 4: Nh·∫≠p email c√≥ @ v√† .


# B√†i 5: Nh·∫≠p m·∫≠t kh·∫©u √≠t nh·∫•t 6 k√Ω t·ª±


# =============================================================================
# PH·∫¶N C: MENU SYSTEMS
# =============================================================================

print("\nüìñ PH·∫¶N C: MENU SYSTEMS")
print("-" * 40)

# C.1. V√≠ d·ª•: Menu ƒë∆°n gi·∫£n
print("C.1. V√≠ d·ª•: Menu Calculator ƒë∆°n gi·∫£n")
while True:
    print("\n=== CALCULATOR ===")
    print("1. C·ªông")
    print("2. Tr·ª´")
    print("3. Tho√°t")
    
    choice = input("Ch·ªçn (1-3): ")
    
    if choice == '1':
        try:
            a = float(input("S·ªë th·ª© nh·∫•t: "))
            b = float(input("S·ªë th·ª© hai: "))
            print(f"K·∫øt qu·∫£: {a} + {b} = {a + b}")
        except ValueError:
            print("‚ùå L·ªói: Vui l√≤ng nh·∫≠p s·ªë!")
    elif choice == '2':
        try:
            a = float(input("S·ªë th·ª© nh·∫•t: "))
            b = float(input("S·ªë th·ª© hai: "))
            print(f"K·∫øt qu·∫£: {a} - {b} = {a - b}")
        except ValueError:
            print("‚ùå L·ªói: Vui l√≤ng nh·∫≠p s·ªë!")
    elif choice == '3':
        print("üëã T·∫°m bi·ªát!")
        break
    else:
        print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")

# C.2. V√≠ d·ª•: Menu v·ªõi counter
print("\nC.2. V√≠ d·ª•: Menu v·ªõi ƒë·∫øm l·ª±a ch·ªçn")
total_operations = 0
while True:
    print(f"\n=== MENU (ƒê√£ th·ª±c hi·ªán: {total_operations} l·∫ßn) ===")
    print("1. In th√¥ng b√°o")
    print("2. T√≠nh b√¨nh ph∆∞∆°ng")
    print("3. Xem th·ªëng k√™")
    print("4. Tho√°t")
    
    option = input("Ch·ªçn: ")
    
    if option == '1':
        message = input("Nh·∫≠p th√¥ng b√°o: ")
        print(f"üì¢ {message}")
        total_operations += 1
    elif option == '2':
        try:
            num = float(input("Nh·∫≠p s·ªë: "))
            print(f"{num}¬≤ = {num**2}")
            total_operations += 1
        except ValueError:
            print("‚ùå S·ªë kh√¥ng h·ª£p l·ªá!")
    elif option == '3':
        print(f"üìä B·∫°n ƒë√£ th·ª±c hi·ªán {total_operations} thao t√°c")
    elif option == '4':
        print(f"C·∫£m ∆°n! T·ªïng c·ªông {total_operations} thao t√°c")
        break
    else:
        print("‚ùå Kh√¥ng h·ª£p l·ªá!")

print("\nüèÉ‚Äç‚ôÇÔ∏è B√ÄI T·∫¨P PH·∫¶N C:")
print("1. T·∫°o menu qu·∫£n l√Ω sinh vi√™n (th√™m, xem, tho√°t)")
print("2. Menu t√≠nh to√°n n√¢ng cao (4 ph√©p t√≠nh)")
print("3. Menu game ƒë∆°n gi·∫£n (play, score, quit)")

# Vi·∫øt code b√†i t·∫≠p ·ªü ƒë√¢y:
print("\n--- B√ÄI L√ÄM PH·∫¶N C ---")

# B√†i 1: Menu qu·∫£n l√Ω sinh vi√™n


# B√†i 2: Menu calculator n√¢ng cao


# B√†i 3: Menu game


# =============================================================================
# PH·∫¶N D: GAMES V·ªöI WHILE
# =============================================================================

print("\nüìñ PH·∫¶N D: GAMES V·ªöI WHILE")
print("-" * 40)

# D.1. V√≠ d·ª•: Game ƒëo√°n s·ªë ƒë∆°n gi·∫£n
import random

print("D.1. V√≠ d·ª•: Game ƒëo√°n s·ªë")
secret = random.randint(1, 10)
attempts = 0
max_attempts = 3

print(f"üéØ ƒêo√°n s·ªë t·ª´ 1-10! B·∫°n c√≥ {max_attempts} l·∫ßn th·ª≠.")

while attempts < max_attempts:
    try:
        guess = int(input(f"L·∫ßn {attempts + 1}: "))
        attempts += 1
        
        if guess == secret:
            print(f"üéâ ƒê√∫ng! S·ªë l√† {secret}")
            break
        elif guess < secret:
            print("üìà S·ªë c·∫ßn t√¨m l·ªõn h∆°n!")
        else:
            print("üìâ S·ªë c·∫ßn t√¨m nh·ªè h∆°n!")
            
        remaining = max_attempts - attempts
        if remaining > 0:
            print(f"C√≤n {remaining} l·∫ßn th·ª≠!")
    except ValueError:
        print("‚ùå Vui l√≤ng nh·∫≠p s·ªë!")
        attempts -= 1
else:
    print(f"üíÄ H·∫øt l∆∞·ª£t! S·ªë ƒë√∫ng l√† {secret}")

# D.2. V√≠ d·ª•: Rock Paper Scissors
print("\nD.2. V√≠ d·ª•: K√©o B√∫a Bao mini")
choices = ['k√©o', 'b√∫a', 'bao']
player_wins = 0
computer_wins = 0

while player_wins < 2 and computer_wins < 2:
    print(f"\nT·ª∑ s·ªë: B·∫°n {player_wins} - {computer_wins} M√°y")
    player_choice = input("Ch·ªçn (k√©o/b√∫a/bao): ").lower()
    
    if player_choice not in choices:
        print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
        continue
    
    computer_choice = random.choice(choices)
    print(f"M√°y ch·ªçn: {computer_choice}")
    
    if player_choice == computer_choice:
        print("ü§ù H√≤a!")
    elif (player_choice == 'k√©o' and computer_choice == 'bao') or \
         (player_choice == 'b√∫a' and computer_choice == 'k√©o') or \
         (player_choice == 'bao' and computer_choice == 'b√∫a'):
        print("üéâ B·∫°n th·∫Øng!")
        player_wins += 1
    else:
        print("üíª M√°y th·∫Øng!")
        computer_wins += 1

if player_wins == 2:
    print("üèÜ B·∫°n chi·∫øn th·∫Øng!")
else:
    print("ü§ñ M√°y chi·∫øn th·∫Øng!")

print("\nüèÉ‚Äç‚ôÇÔ∏è B√ÄI T·∫¨P PH·∫¶N D:")
print("1. Game ƒëo√°n s·ªë 1-100 v·ªõi hints")
print("2. Quiz tr·∫Øc nghi·ªám ƒë∆°n gi·∫£n")
print("3. Game ƒë·∫øm ng∆∞·ª£c v·ªõi random stops")

# Vi·∫øt code b√†i t·∫≠p ·ªü ƒë√¢y:
print("\n--- B√ÄI L√ÄM PH·∫¶N D ---")

# B√†i 1: Game ƒëo√°n s·ªë 1-100


# B√†i 2: Quiz tr·∫Øc nghi·ªám


# B√†i 3: Game ƒë·∫øm ng∆∞·ª£c random


# =============================================================================
# PH·∫¶N E: DATA COLLECTION V√Ä PROCESSING
# =============================================================================

print("\nüìñ PH·∫¶N E: DATA COLLECTION & PROCESSING")
print("-" * 50)

# E.1. V√≠ d·ª•: Thu th·∫≠p v√† x·ª≠ l√Ω ƒëi·ªÉm s·ªë
print("E.1. V√≠ d·ª•: Thu th·∫≠p ƒëi·ªÉm h·ªçc sinh")
scores = []
student_count = 0

while True:
    student_input = input(f"ƒêi·ªÉm h·ªçc sinh {student_count + 1} (ho·∫∑c 'done'): ")
    
    if student_input.lower() == 'done':
        break
    
    try:
        score = float(student_input)
        if 0 <= score <= 10:
            scores.append(score)
            student_count += 1
            print(f"‚úÖ ƒê√£ th√™m ƒëi·ªÉm {score}")
        else:
            print("‚ùå ƒêi·ªÉm ph·∫£i t·ª´ 0-10!")
    except ValueError:
        print("‚ùå Vui l√≤ng nh·∫≠p s·ªë!")

if scores:
    average = sum(scores) / len(scores)
    print(f"\nüìä Th·ªëng k√™ {student_count} h·ªçc sinh:")
    print(f"ƒêi·ªÉm trung b√¨nh: {average:.2f}")
    print(f"ƒêi·ªÉm cao nh·∫•t: {max(scores)}")
    print(f"ƒêi·ªÉm th·∫•p nh·∫•t: {min(scores)}")

# E.2. V√≠ d·ª•: Shopping cart ƒë∆°n gi·∫£n
print("\nE.2. V√≠ d·ª•: Shopping cart")
cart = []
total_price = 0

while True:
    print(f"\nüõí Gi·ªè h√†ng (T·ªïng: {total_price}ƒë)")
    print("1. Th√™m s·∫£n ph·∫©m")
    print("2. Xem gi·ªè h√†ng")
    print("3. Thanh to√°n")
    
    choice = input("Ch·ªçn: ")
    
    if choice == '1':
        item = input("T√™n s·∫£n ph·∫©m: ")
        try:
            price = float(input("Gi√°: "))
            if price > 0:
                cart.append((item, price))
                total_price += price
                print(f"‚úÖ ƒê√£ th√™m {item} - {price}ƒë")
            else:
                print("‚ùå Gi√° ph·∫£i > 0!")
        except ValueError:
            print("‚ùå Gi√° kh√¥ng h·ª£p l·ªá!")
    elif choice == '2':
        if cart:
            print("üì¶ Gi·ªè h√†ng:")
            for i, (item, price) in enumerate(cart, 1):
                print(f"{i}. {item}: {price}ƒë")
        else:
            print("Gi·ªè h√†ng tr·ªëng!")
    elif choice == '3':
        print(f"üí∞ Thanh to√°n: {total_price}ƒë")
        break
    else:
        print("‚ùå Kh√¥ng h·ª£p l·ªá!")

print("\nüèÉ‚Äç‚ôÇÔ∏è B√ÄI T·∫¨P PH·∫¶N E:")
print("1. Thu th·∫≠p th√¥ng tin nh√¢n vi√™n")
print("2. Qu·∫£n l√Ω s√°ch th∆∞ vi·ªán")
print("3. Tracking chi ti√™u h√†ng ng√†y")

# Vi·∫øt code b√†i t·∫≠p ·ªü ƒë√¢y:
print("\n--- B√ÄI L√ÄM PH·∫¶N E ---")

# B√†i 1: Thu th·∫≠p th√¥ng tin nh√¢n vi√™n


# B√†i 2: Qu·∫£n l√Ω s√°ch


# B√†i 3: Tracking chi ti√™u


# =============================================================================
# PH·∫¶N F: PASSWORD V√Ä SECURITY
# =============================================================================

print("\nüìñ PH·∫¶N F: PASSWORD & SECURITY")
print("-" * 40)

# F.1. V√≠ d·ª•: Password validation v·ªõi attempts
print("F.1. V√≠ d·ª•: H·ªá th·ªëng ƒëƒÉng nh·∫≠p")
correct_password = "python123"
max_attempts = 3
attempts = 0

while attempts < max_attempts:
    password = input("Nh·∫≠p m·∫≠t kh·∫©u: ")
    
    if password == correct_password:
        print("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!")
        break
    else:
        attempts += 1
        remaining = max_attempts - attempts
        if remaining > 0:
            print(f"‚ùå Sai m·∫≠t kh·∫©u! C√≤n {remaining} l·∫ßn th·ª≠.")
        else:
            print("üö´ H·∫øt l∆∞·ª£t th·ª≠! T√†i kho·∫£n b·ªã kh√≥a.")

# F.2. V√≠ d·ª•: Password strength checker
print("\nF.2. V√≠ d·ª•: Ki·ªÉm tra ƒë·ªô m·∫°nh m·∫≠t kh·∫©u")
while True:
    new_password = input("T·∫°o m·∫≠t kh·∫©u m·ªõi: ")
    
    # Ki·ªÉm tra c√°c ti√™u ch√≠
    length_ok = len(new_password) >= 8
    has_upper = any(c.isupper() for c in new_password)
    has_lower = any(c.islower() for c in new_password)
    has_digit = any(c.isdigit() for c in new_password)
    
    print("üîí Ki·ªÉm tra m·∫≠t kh·∫©u:")
    print(f"ƒê·ªô d√†i ‚â• 8: {'‚úÖ' if length_ok else '‚ùå'}")
    print(f"C√≥ ch·ªØ hoa: {'‚úÖ' if has_upper else '‚ùå'}")
    print(f"C√≥ ch·ªØ th∆∞·ªùng: {'‚úÖ' if has_lower else '‚ùå'}")
    print(f"C√≥ s·ªë: {'‚úÖ' if has_digit else '‚ùå'}")
    
    if all([length_ok, has_upper, has_lower, has_digit]):
        print("üîê M·∫≠t kh·∫©u m·∫°nh! ƒê√£ ch·∫•p nh·∫≠n.")
        break
    else:
        print("‚ö†Ô∏è M·∫≠t kh·∫©u y·∫øu! Vui l√≤ng th·ª≠ l·∫°i.")

print("\nüèÉ‚Äç‚ôÇÔ∏è B√ÄI T·∫¨P PH·∫¶N F:")
print("1. H·ªá th·ªëng ƒëƒÉng nh·∫≠p v·ªõi username")
print("2. T·∫°o PIN 4 s·ªë v·ªõi validation")
print("3. Password generator ƒë∆°n gi·∫£n")

# Vi·∫øt code b√†i t·∫≠p ·ªü ƒë√¢y:
print("\n--- B√ÄI L√ÄM PH·∫¶N F ---")

# B√†i 1: ƒêƒÉng nh·∫≠p v·ªõi username + password


# B√†i 2: T·∫°o PIN 4 s·ªë


# B√†i 3: Password generator


# =============================================================================
# PH·∫¶N G: ATM SIMULATION
# =============================================================================

print("\nüìñ PH·∫¶N G: ATM SIMULATION")
print("-" * 40)

# G.1. V√≠ d·ª•: ATM ƒë∆°n gi·∫£n
print("G.1. V√≠ d·ª•: M√°y ATM ƒë∆°n gi·∫£n")
balance = 1000000  # S·ªë d∆∞ ban ƒë·∫ßu
pin = "1234"

# X√°c th·ª±c PIN
attempts = 0
while attempts < 3:
    entered_pin = input("Nh·∫≠p PIN: ")
    if entered_pin == pin:
        print("‚úÖ PIN ch√≠nh x√°c!")
        break
    else:
        attempts += 1
        if attempts < 3:
            print(f"‚ùå PIN sai! C√≤n {3-attempts} l·∫ßn th·ª≠.")
        else:
            print("üö´ Th·∫ª b·ªã kh√≥a!")
            exit()

# Menu ATM
while True:
    print(f"\nüí≥ ATM MENU (S·ªë d∆∞: {balance:,}ƒë)")
    print("1. Ki·ªÉm tra s·ªë d∆∞")
    print("2. R√∫t ti·ªÅn")
    print("3. N·∫°p ti·ªÅn")
    print("4. Tho√°t")
    
    choice = input("Ch·ªçn: ")
    
    if choice == '1':
        print(f"üí∞ S·ªë d∆∞ hi·ªán t·∫°i: {balance:,}ƒë")
    elif choice == '2':
        try:
            amount = int(input("S·ªë ti·ªÅn c·∫ßn r√∫t: "))
            if amount > 0:
                if amount <= balance:
                    balance -= amount
                    print(f"‚úÖ R√∫t {amount:,}ƒë th√†nh c√¥ng!")
                    print(f"S·ªë d∆∞ c√≤n l·∫°i: {balance:,}ƒë")
                else:
                    print("‚ùå S·ªë d∆∞ kh√¥ng ƒë·ªß!")
            else:
                print("‚ùå S·ªë ti·ªÅn ph·∫£i > 0!")
        except ValueError:
            print("‚ùå Vui l√≤ng nh·∫≠p s·ªë!")
    elif choice == '3':
        try:
            amount = int(input("S·ªë ti·ªÅn n·∫°p: "))
            if amount > 0:
                balance += amount
                print(f"‚úÖ N·∫°p {amount:,}ƒë th√†nh c√¥ng!")
                print(f"S·ªë d∆∞ m·ªõi: {balance:,}ƒë")
            else:
                print("‚ùå S·ªë ti·ªÅn ph·∫£i > 0!")
        except ValueError:
            print("‚ùå Vui l√≤ng nh·∫≠p s·ªë!")
    elif choice == '4':
        print("üëã C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng ATM!")
        break
    else:
        print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")

print("\nüèÉ‚Äç‚ôÇÔ∏è B√ÄI T·∫¨P PH·∫¶N G:")
print("1. ATM v·ªõi l·ªãch s·ª≠ giao d·ªãch")
print("2. ATM v·ªõi nhi·ªÅu lo·∫°i th·∫ª")

# Vi·∫øt code b√†i t·∫≠p ·ªü ƒë√¢y:
print("\n--- B√ÄI L√ÄM PH·∫¶N G ---")

# B√†i 1: ATM v·ªõi l·ªãch s·ª≠


# B√†i 2: ATM nhi·ªÅu th·∫ª


# =============================================================================
# T·ªîNG K·∫æT V√Ä ƒê√ÅNH GI√Å
# =============================================================================

print("\n" + "="*50)
print("üèÜ T·ªîNG K·∫æT B√ÄI T·∫¨P 2")
print("="*50)

print("""
KI·∫æN TH·ª®C ƒê√É H·ªåC:
‚úÖ While loops v·ªõi counters
‚úÖ Input validation techniques
‚úÖ Menu systems development
‚úÖ Game programming basics
‚úÖ Data collection & processing
‚úÖ Security & password handling
‚úÖ ATM simulation

ƒêI·ªÇM ƒê√ÅNH GI√Å B·∫¢N TH√ÇN:
- Ph·∫ßn A (While c∆° b·∫£n): ___/5
- Ph·∫ßn B (Input validation): ___/5
- Ph·∫ßn C (Menu systems): ___/3
- Ph·∫ßn D (Games): ___/3
- Ph·∫ßn E (Data processing): ___/3
- Ph·∫ßn F (Security): ___/3
- Ph·∫ßn G (ATM): ___/2

T·ªîNG ƒêI·ªÇM: ___/24

CHU·∫®N ƒê√ÅNH GI√Å:
ü•á 21-24 ƒëi·ªÉm: Xu·∫•t s·∫Øc!
ü•à 17-20 ƒëi·ªÉm: Gi·ªèi!
ü•â 13-16 ƒëi·ªÉm: Kh√°
üìö 9-12 ƒëi·ªÉm: C·∫ßn √¥n l·∫°i
üí™ <9 ƒëi·ªÉm: H·ªçc l·∫°i t·ª´ ƒë·∫ßu

SKILLS ƒê√É PH√ÅT TRI·ªÇN:
‚ñ° T∆∞ duy logic v·ªõi while loops
‚ñ° Input validation & error handling
‚ñ° User interface design (menu)
‚ñ° Game development basics
‚ñ° Data management
‚ñ° Security awareness

GHI CH√ö PH·∫¢N H·ªíI:
- Ph·∫ßn kh√≥ nh·∫•t: ________________
- Ph·∫ßn th√∫ v·ªã nh·∫•t: ______________
- K·ªπ nƒÉng c·∫ßn c·∫£i thi·ªán: __________
- ·ª®ng d·ª•ng th·ª±c t·∫ø nghƒ© ra: _______
""")

print("üî• S·∫µn s√†ng cho B√†i T·∫≠p 3: Break, Continue & Nested Loops!")

# =============================================================================
# BONUS: PROJECTS T√çCH H·ª¢P (TU·ª≤ CH·ªåN)
# =============================================================================

print("\nüåü BONUS - PROJECTS T√çCH H·ª¢P:")
print("Ch·ªâ l√†m khi ƒë√£ th√†nh th·∫°o t·∫•t c·∫£ ph·∫ßn tr√™n!")
print("-" * 50)

print("1. üè™ Mini Store Management System")
print("2. üéÆ Adventure Game v·ªõi nhi·ªÅu rooms")
print("3. üìö Library Book Lending System")
print("4. üí∞ Personal Finance Tracker")
print("5. üéØ Complete Quiz System v·ªõi scoring")

# Bonus projects (advanced):
print("\n--- BONUS PROJECT CODE ---")

# Ch·ªçn 1 project ƒë·ªÉ th·ª±c hi·ªán:


print("\nüéä XIN CH√öC M·ª™NG! B·∫†N ƒê√É TH√ÄNH TH·∫†O WHILE LOOPS!") 
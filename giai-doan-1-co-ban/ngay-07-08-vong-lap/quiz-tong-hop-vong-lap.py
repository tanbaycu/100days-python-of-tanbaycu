"""
=== QUIZ T·ªîNG H·ª¢P NG√ÄY 7-8: V√íNG L·∫∂P (FOR & WHILE) ===
Quiz t∆∞∆°ng t√°c v·ªõi giao di·ªán m√†u s·∫Øc v√† theo d√µi ƒëi·ªÉm s·ªë real-time

Ch·ªß ƒë·ªÅ: For loops, While loops, Break, Continue, Nested loops
Level: Beginner to Advanced
"""

import random
import os
import time
from colorama import Fore, Back, Style, init
from rich.console import Console
from rich.text import Text
from rich.panel import Panel

# Kh·ªüi t·∫°o colorama v√† rich
init(autoreset=True)
console = Console()

class LoopQuizManager:
    def __init__(self):
        self.score = 0
        self.total_questions = 60  # 50 tr·∫Øc nghi·ªám + 10 coding
        self.current_question = 0
        self.wrong_answers = []
        
    def clear_screen(self):
        """Clear m√†n h√¨nh cho c·∫£ Windows v√† Unix"""
        os.system('cls' if os.name == 'nt' else 'clear')
    
    def display_header(self):
        """Hi·ªÉn th·ªã header ƒë·∫πp m·∫Øt"""
        print(Fore.CYAN + "=" * 70)
        print(Fore.YELLOW + Style.BRIGHT + "   üîÑ QUIZ T·ªîNG H·ª¢P NG√ÄY 7-8: V√íNG L·∫∂P (FOR & WHILE)   ")
        print(Fore.CYAN + "=" * 70)
        print(Fore.WHITE + f"C√¢u h·ªèi: {self.current_question}/{self.total_questions} | " + 
              Fore.GREEN + f"ƒêi·ªÉm s·ªë: {self.score}")
        print(Fore.CYAN + "-" * 70)
    
    def ask_question(self, question, options, correct_answer, explanation=""):
        """H·ªèi m·ªôt c√¢u tr·∫Øc nghi·ªám"""
        self.clear_screen()
        self.current_question += 1
        self.display_header()
        
        print(Fore.WHITE + Style.BRIGHT + f"C√¢u {self.current_question}: {question}\n")
        
        # Hi·ªÉn th·ªã c√°c l·ª±a ch·ªçn
        for i, option in enumerate(options, 1):
            print(Fore.CYAN + f"{i}. {option}")
        
        # L·∫•y input t·ª´ user
        while True:
            try:
                print()
                user_choice = int(input(Fore.YELLOW + "Ch·ªçn ƒë√°p √°n (1-4): "))
                if 1 <= user_choice <= 4:
                    break
                else:
                    print(Fore.RED + "Vui l√≤ng ch·ªçn t·ª´ 1-4!")
            except ValueError:
                print(Fore.RED + "Vui l√≤ng nh·∫≠p s·ªë!")
        
        # Ki·ªÉm tra ƒë√°p √°n
        if user_choice == correct_answer:
            self.score += 1
            print(Fore.GREEN + Style.BRIGHT + "‚úì CH√çNH X√ÅC!")
        else:
            correct_text = options[correct_answer - 1]
            user_text = options[user_choice - 1]
            print(Fore.RED + Style.BRIGHT + f"‚úó SAI! ƒê√°p √°n ƒë√∫ng l√†: {correct_answer}. {correct_text}")
            self.wrong_answers.append({
                'question': question,
                'user_answer': user_text,
                'correct_answer': correct_text,
                'explanation': explanation
            })
        
        if explanation:
            print(Fore.CYAN + f"\nüí° Gi·∫£i th√≠ch: {explanation}")
        
        input(Fore.MAGENTA + "\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
    
    def ask_coding_question(self, question, sample_input, expected_output, explanation=""):
        """H·ªèi c√¢u h·ªèi coding"""
        self.clear_screen()
        self.current_question += 1
        self.display_header()
        
        print(Fore.WHITE + Style.BRIGHT + f"C√¢u coding {self.current_question}: {question}\n")
        print(Fore.CYAN + f"Input m·∫´u: {sample_input}")
        print(Fore.CYAN + f"Output mong ƒë·ª£i: {expected_output}\n")
        
        user_code = input(Fore.YELLOW + "Nh·∫≠p code Python c·ªßa b·∫°n (m·ªôt d√≤ng): ")
        
        try:
            # T·∫°o m√¥i tr∆∞·ªùng an to√†n ƒë·ªÉ test code
            test_globals = {"__builtins__": {}}
            exec(user_code, test_globals)
            print(Fore.GREEN + Style.BRIGHT + "‚úì Code h·ª£p l·ªá!")
            self.score += 1
        except:
            print(Fore.RED + Style.BRIGHT + "‚úó Code c√≥ l·ªói ho·∫∑c kh√¥ng ch√≠nh x√°c!")
            self.wrong_answers.append({
                'question': question,
                'user_answer': user_code,
                'correct_answer': expected_output,
                'explanation': explanation
            })
        
        if explanation:
            print(Fore.CYAN + f"\nüí° Gi·∫£i th√≠ch: {explanation}")
        
        input(Fore.MAGENTA + "\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
    
    def show_final_results(self):
        """Hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi c√πng"""
        self.clear_screen()
        
        percentage = (self.score / self.total_questions) * 100
        
        # X√°c ƒë·ªãnh level
        if percentage >= 90:
            level = "XU·∫§T S·∫ÆC"
            color = Fore.GREEN
            emoji = "üèÜ"
        elif percentage >= 80:
            level = "GI·ªéI"
            color = Fore.YELLOW
            emoji = "ü•á"
        elif percentage >= 70:
            level = "KH√Å"
            color = Fore.CYAN
            emoji = "ü•à"
        elif percentage >= 60:
            level = "TRUNG B√åNH"
            color = Fore.BLUE
            emoji = "ü•â"
        else:
            level = "C·∫¶N C·ªê G·∫ÆNG"
            color = Fore.RED
            emoji = "üìö"
        
        print(color + "=" * 60)
        print(color + Style.BRIGHT + f"   {emoji} K·∫æT QU·∫¢ QUIZ V√íNG L·∫∂P   ")
        print(color + "=" * 60)
        print(Fore.WHITE + f"ƒêi·ªÉm s·ªë: {self.score}/{self.total_questions}")
        print(Fore.WHITE + f"T·ª∑ l·ªá: {percentage:.1f}%")
        print(color + Style.BRIGHT + f"X·∫øp h·∫°ng: {level}")
        print(color + "=" * 60)
        
        # Hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi sai (n·∫øu c√≥)
        if self.wrong_answers:
            print(Fore.RED + "\nüìù C√ÅC C√ÇU TR·∫¢ L·ªúI SAI:")
            for i, wrong in enumerate(self.wrong_answers, 1):
                print(Fore.YELLOW + f"\n{i}. {wrong['question']}")
                print(Fore.RED + f"   B·∫°n ch·ªçn: {wrong['user_answer']}")
                print(Fore.GREEN + f"   ƒê√°p √°n ƒë√∫ng: {wrong['correct_answer']}")
                if wrong['explanation']:
                    print(Fore.CYAN + f"   üí° {wrong['explanation']}")
        
        print(Fore.MAGENTA + "\nüéØ Khuy·∫øn ngh·ªã h·ªçc t·∫≠p:")
        if percentage < 60:
            print(Fore.WHITE + "- Xem l·∫°i l√Ω thuy·∫øt v·ªÅ v√≤ng l·∫∑p for v√† while")
            print(Fore.WHITE + "- Th·ª±c h√†nh th√™m c√°c b√†i t·∫≠p c∆° b·∫£n")
            print(Fore.WHITE + "- Hi·ªÉu r√µ c√°ch s·ª≠ d·ª•ng break v√† continue")
        elif percentage < 80:
            print(Fore.WHITE + "- Luy·ªán t·∫≠p th√™m nested loops")
            print(Fore.WHITE + "- Th·ª±c h√†nh c√°c d·ª± √°n ph·ª©c t·∫°p h∆°n")
        else:
            print(Fore.WHITE + "- Xu·∫•t s·∫Øc! H√£y th·ª≠ th√°ch v·ªõi c√°c d·ª± √°n n√¢ng cao")
            print(Fore.WHITE + "- Chu·∫©n b·ªã cho ch·ªß ƒë·ªÅ ti·∫øp theo: Lists v√† Tuples")

def run_quiz():
    """Ch·∫°y to√†n b·ªô quiz"""
    quiz = LoopQuizManager()
    
    # Hi·ªÉn th·ªã m√†n h√¨nh ch√†o m·ª´ng
    quiz.clear_screen()
    console.print(Panel.fit(
        Text("üîÑ QUIZ T·ªîNG H·ª¢P V√íNG L·∫∂P\nNg√†y 7-8: For & While Loops", 
             style="bold cyan", justify="center"),
        style="cyan"
    ))
    print(Fore.WHITE + "\nüìö Quiz bao g·ªìm:")
    print(Fore.CYAN + "‚Ä¢ 50 c√¢u tr·∫Øc nghi·ªám v·ªÅ v√≤ng l·∫∑p")
    print(Fore.CYAN + "‚Ä¢ 10 c√¢u coding th·ª±c h√†nh")
    print(Fore.CYAN + "‚Ä¢ Gi·∫£i th√≠ch chi ti·∫øt cho t·ª´ng c√¢u")
    
    input(Fore.MAGENTA + "\nNh·∫•n Enter ƒë·ªÉ b·∫Øt ƒë·∫ßu...")
    
    # PH·∫¶N 1: C√ÇU H·ªéI TR·∫ÆC NGHI·ªÜM (50 c√¢u)
    
    # For Loop C∆° b·∫£n (10 c√¢u)
    quiz.ask_question(
        "C√∫ ph√°p ƒë√∫ng c·ªßa v√≤ng l·∫∑p for ƒë·ªÉ l·∫∑p t·ª´ 0 ƒë·∫øn 4 l√† g√¨?",
        ["for i in range(5):", "for i in range(0,5):", "for i in 0 to 5:", "C·∫£ A v√† B ƒë·ªÅu ƒë√∫ng"],
        4,
        "range(5) v√† range(0,5) ƒë·ªÅu t·∫°o ra chu·ªói t·ª´ 0 ƒë·∫øn 4"
    )
    
    quiz.ask_question(
        "K·∫øt qu·∫£ c·ªßa range(2, 8, 2) l√† g√¨?",
        ["[2, 4, 6]", "[2, 4, 6, 8]", "[2, 3, 4, 5, 6, 7]", "[0, 2, 4, 6]"],
        1,
        "range(start, stop, step) t·∫°o ra: 2, 4, 6 (kh√¥ng bao g·ªìm 8)"
    )
    
    quiz.ask_question(
        "ƒêo·∫°n code n√†o in ra c√°c s·ªë t·ª´ 5 ƒë·∫øn 1 (gi·∫£m d·∫ßn)?",
        ["for i in range(5, 0, -1):", "for i in range(5, 1, -1):", "for i in range(1, 5, -1):", "for i in range(1, 6, -1):"],
        1,
        "range(5, 0, -1) t·∫°o ra: 5, 4, 3, 2, 1"
    )
    
    quiz.ask_question(
        "V√≤ng l·∫∑p for d√πng ƒë·ªÉ l√†m g√¨?",
        ["L·∫∑p qua m·ªôt chu·ªói c√°c ph·∫ßn t·ª≠", "L·∫∑p v·ªõi ƒëi·ªÅu ki·ªán", "T·∫°o h√†m", "Khai b√°o bi·∫øn"],
        1,
        "For loop d√πng ƒë·ªÉ l·∫∑p qua c√°c ph·∫ßn t·ª≠ trong iterable (list, string, range...)"
    )
    
    quiz.ask_question(
        "K·∫øt qu·∫£ c·ªßa ƒëo·∫°n code: for i in 'abc': print(i)",
        ["a b c (tr√™n 3 d√≤ng)", "abc", "0 1 2", "L·ªói"],
        1,
        "For loop c√≥ th·ªÉ l·∫∑p qua t·ª´ng k√Ω t·ª± trong string"
    )
    
    quiz.ask_question(
        "len(range(10)) tr·∫£ v·ªÅ gi√° tr·ªã n√†o?",
        ["9", "10", "11", "L·ªói"],
        2,
        "range(10) c√≥ 10 ph·∫ßn t·ª≠ (t·ª´ 0 ƒë·∫øn 9)"
    )
    
    quiz.ask_question(
        "C√°ch n√†o ƒë√∫ng ƒë·ªÉ l·∫∑p qua list numbers = [1,2,3]?",
        ["for i in numbers:", "for i in len(numbers):", "for i = 0 to len(numbers):", "for numbers in i:"],
        1,
        "C√∫ ph√°p: for item in list_name"
    )
    
    quiz.ask_question(
        "ƒê·ªÉ l·∫•y c·∫£ index v√† value khi l·∫∑p list, ta d√πng:",
        ["for i, v in list:", "for i, v in enumerate(list):", "for i in range(list):", "for list[i] in range:"],
        2,
        "enumerate() tr·∫£ v·ªÅ tuple (index, value)"
    )
    
    quiz.ask_question(
        "range(0) t·∫°o ra g√¨?",
        ["[0]", "[]", "L·ªói", "0"],
        2,
        "range(0) t·∫°o ra chu·ªói r·ªóng"
    )
    
    quiz.ask_question(
        "V√≤ng l·∫∑p for c√≥ th·ªÉ l·∫∑p qua ki·ªÉu d·ªØ li·ªáu n√†o?",
        ["Ch·ªâ numbers", "Ch·ªâ strings", "T·∫•t c·∫£ iterable objects", "Ch·ªâ lists"],
        3,
        "For loop ho·∫°t ƒë·ªông v·ªõi b·∫•t k·ª≥ iterable n√†o: string, list, tuple, range..."
    )
    
    # While Loop (10 c√¢u)
    quiz.ask_question(
        "ƒêi·ªÅu ki·ªán n√†o c·∫ßn thi·∫øt cho v√≤ng l·∫∑p while?",
        ["Ph·∫£i c√≥ bi·∫øn ƒë·∫øm", "Ph·∫£i c√≥ ƒëi·ªÅu ki·ªán boolean", "Ph·∫£i c√≥ break", "Ph·∫£i c√≥ list"],
        2,
        "While loop c·∫ßn ƒëi·ªÅu ki·ªán boolean ƒë·ªÉ quy·∫øt ƒë·ªãnh ti·∫øp t·ª•c hay d·ª´ng"
    )
    
    quiz.ask_question(
        "V√≤ng l·∫∑p v√¥ h·∫°n x·∫£y ra khi n√†o?",
        ["ƒêi·ªÅu ki·ªán while lu√¥n True", "Qu√™n update bi·∫øn ƒëi·ªÅu ki·ªán", "Kh√¥ng c√≥ break", "T·∫•t c·∫£ ƒë√°p √°n tr√™n"],
        4,
        "Infinite loop x·∫£y ra khi ƒëi·ªÅu ki·ªán kh√¥ng bao gi·ªù False"
    )
    
    quiz.ask_question(
        "ƒêo·∫°n code n√†o in ra s·ªë t·ª´ 1 ƒë·∫øn 5?",
        ["i=1; while i<=5: print(i)", "i=1; while i<=5: print(i); i+=1", "i=0; while i<5: print(i+1); i+=1", "B v√† C ƒë·ªÅu ƒë√∫ng"],
        4,
        "C·∫ßn nh·ªõ update bi·∫øn ƒëi·ªÅu ki·ªán ƒë·ªÉ tr√°nh v√≤ng l·∫∑p v√¥ h·∫°n"
    )
    
    quiz.ask_question(
        "While loop th√≠ch h·ª£p nh·∫•t khi n√†o?",
        ["Bi·∫øt tr∆∞·ªõc s·ªë l·∫ßn l·∫∑p", "Kh√¥ng bi·∫øt tr∆∞·ªõc s·ªë l·∫ßn l·∫∑p", "L·∫∑p qua list", "T·∫°o range"],
        2,
        "While loop t·ªët khi s·ªë l·∫ßn l·∫∑p ph·ª• thu·ªôc v√†o ƒëi·ªÅu ki·ªán ƒë·ªông"
    )
    
    quiz.ask_question(
        "S·ª± kh√°c bi·ªát ch√≠nh gi·ªØa for v√† while l√† g√¨?",
        ["For nhanh h∆°n while", "While nhanh h∆°n for", "For c√≥ c·∫•u tr√∫c c·ªë ƒë·ªãnh, while linh ho·∫°t h∆°n", "Kh√¥ng c√≥ s·ª± kh√°c bi·ªát"],
        3,
        "For loop c√≥ c·∫•u tr√∫c r√µ r√†ng, while loop linh ho·∫°t v·ªõi ƒëi·ªÅu ki·ªán"
    )
    
    quiz.ask_question(
        "ƒê·ªÉ ƒë·ªçc input ƒë·∫øn khi user nh·∫≠p 'quit', ta d√πng:",
        ["for input in 'quit':", "while input != 'quit':", "while True: if input=='quit': break", "B v√† C ƒë·ªÅu c√≥ th·ªÉ"],
        4,
        "C·∫£ hai c√°ch ƒë·ªÅu ƒë√∫ng, t√πy thu·ªôc v√†o c√°ch implement"
    )
    
    quiz.ask_question(
        "V√≤ng l·∫∑p while c√≥ th·ªÉ thay th·∫ø for loop kh√¥ng?",
        ["Kh√¥ng", "C√≥, nh∆∞ng ph·ª©c t·∫°p h∆°n", "Ch·ªâ trong m·ªôt s·ªë tr∆∞·ªùng h·ª£p", "While nhanh h∆°n for"],
        2,
        "While c√≥ th·ªÉ l√†m m·ªçi th·ª© for l√†m ƒë∆∞·ª£c, nh∆∞ng code s·∫Ω d√†i h∆°n"
    )
    
    quiz.ask_question(
        "C√°ch n√†o t·ªët nh·∫•t ƒë·ªÉ validate user input?",
        ["D√πng for loop", "D√πng while loop v·ªõi try-except", "Kh√¥ng c·∫ßn validate", "D√πng if-else"],
        2,
        "While loop + try-except l√† pattern ph·ªï bi·∫øn cho input validation"
    )
    
    quiz.ask_question(
        "while True: c√≥ nghƒ©a l√† g√¨?",
        ["L·∫∑p 1 l·∫ßn", "L·∫∑p ƒë·∫øn khi c√≥ l·ªói", "L·∫∑p v√¥ h·∫°n cho ƒë·∫øn khi g·∫∑p break", "Kh√¥ng l·∫∑p"],
        3,
        "while True t·∫°o v√≤ng l·∫∑p v√¥ h·∫°n, c·∫ßn break ƒë·ªÉ tho√°t"
    )
    
    quiz.ask_question(
        "Khi n√†o n√™n d√πng while thay v√¨ for?",
        ["Khi l·∫∑p qua string", "Khi c·∫ßn input validation", "Khi l·∫∑p qua list", "Khi t·∫°o range"],
        2,
        "While t·ªët cho c√°c t√¨nh hu·ªëng kh√¥ng bi·∫øt tr∆∞·ªõc s·ªë l·∫ßn l·∫∑p"
    )
    
    # Break v√† Continue (10 c√¢u)
    quiz.ask_question(
        "break statement c√≥ t√°c d·ª•ng g√¨?",
        ["D·ª´ng ch∆∞∆°ng tr√¨nh", "Tho√°t kh·ªèi v√≤ng l·∫∑p hi·ªán t·∫°i", "B·ªè qua iteration hi·ªán t·∫°i", "T·∫°o l·ªói"],
        2,
        "break tho√°t ho√†n to√†n kh·ªèi v√≤ng l·∫∑p"
    )
    
    quiz.ask_question(
        "continue statement c√≥ t√°c d·ª•ng g√¨?",
        ["Tho√°t kh·ªèi v√≤ng l·∫∑p", "B·ªè qua ph·∫ßn c√≤n l·∫°i c·ªßa iteration hi·ªán t·∫°i", "D·ª´ng ch∆∞∆°ng tr√¨nh", "L·∫∑p l·∫°i t·ª´ ƒë·∫ßu"],
        2,
        "continue b·ªè qua code ph√≠a d∆∞·ªõi v√† chuy·ªÉn ƒë·∫øn iteration ti·∫øp theo"
    )
    
    quiz.ask_question(
        "Trong nested loop, break tho√°t kh·ªèi v√≤ng l·∫∑p n√†o?",
        ["T·∫•t c·∫£ v√≤ng l·∫∑p", "V√≤ng l·∫∑p ngo√†i c√πng", "V√≤ng l·∫∑p trong c√πng", "Kh√¥ng tho√°t v√≤ng l·∫∑p n√†o"],
        3,
        "break ch·ªâ tho√°t kh·ªèi v√≤ng l·∫∑p ch·ª©a n√≥ tr·ª±c ti·∫øp"
    )
    
    quiz.ask_question(
        "ƒêo·∫°n code n√†o in ra c√°c s·ªë ch·∫µn t·ª´ 1 ƒë·∫øn 10?",
        ["for i in range(1,11): if i%2==0: print(i)", "for i in range(1,11): if i%2!=0: continue; print(i)", "for i in range(2,11,2): print(i)", "T·∫•t c·∫£ ƒë·ªÅu ƒë√∫ng"],
        4,
        "C·∫£ 3 c√°ch ƒë·ªÅu cho k·∫øt qu·∫£ gi·ªëng nhau"
    )
    
    quiz.ask_question(
        "else trong v√≤ng l·∫∑p for/while ch·∫°y khi n√†o?",
        ["Khi c√≥ break", "Khi v√≤ng l·∫∑p ho√†n th√†nh b√¨nh th∆∞·ªùng (kh√¥ng c√≥ break)", "Khi c√≥ continue", "Khi c√≥ l·ªói"],
        2,
        "else ch·∫°y khi v√≤ng l·∫∑p k·∫øt th√∫c t·ª± nhi√™n, kh√¥ng qua break"
    )
    
    quiz.ask_question(
        "pass statement d√πng ƒë·ªÉ l√†m g√¨?",
        ["Tho√°t v√≤ng l·∫∑p", "Placeholder kh√¥ng l√†m g√¨", "B·ªè qua iteration", "T·∫°o l·ªói"],
        2,
        "pass l√† null operation, d√πng khi c·∫ßn placeholder"
    )
    
    quiz.ask_question(
        "ƒê·ªÉ t√¨m s·ªë ƒë·∫ßu ti√™n l·ªõn h∆°n 100 trong list, ta d√πng:",
        ["for + break", "while + break", "for + continue", "A v√† B ƒë·ªÅu ƒë∆∞·ª£c"],
        4,
        "C·∫£ for v√† while ƒë·ªÅu c√≥ th·ªÉ d√πng v·ªõi break ƒë·ªÉ t√¨m v√† d·ª´ng"
    )
    
    quiz.ask_question(
        "continue c√≥ th·ªÉ d√πng trong while loop kh√¥ng?",
        ["Kh√¥ng", "C√≥", "Ch·ªâ trong for loop", "Ch·ªâ trong nested loop"],
        2,
        "continue ho·∫°t ƒë·ªông trong c·∫£ for v√† while loop"
    )
    
    quiz.ask_question(
        "Trong v√≤ng l·∫∑p ƒë·ªçc file, khi n√†o d√πng continue?",
        ["ƒê·ªÉ ƒë√≥ng file", "ƒê·ªÉ b·ªè qua d√≤ng tr·ªëng ho·∫∑c comment", "ƒê·ªÉ ƒë·ªçc d√≤ng ti·∫øp theo", "ƒê·ªÉ ghi file"],
        2,
        "continue th∆∞·ªùng d√πng ƒë·ªÉ b·ªè qua d√≤ng kh√¥ng c·∫ßn x·ª≠ l√Ω"
    )
    
    quiz.ask_question(
        "break v√† return kh√°c nhau nh∆∞ th·∫ø n√†o?",
        ["Kh√¥ng kh√°c", "break tho√°t v√≤ng l·∫∑p, return tho√°t h√†m", "return tho√°t v√≤ng l·∫∑p, break tho√°t h√†m", "C·∫£ hai ƒë·ªÅu tho√°t ch∆∞∆°ng tr√¨nh"],
        2,
        "break ch·ªâ tho√°t v√≤ng l·∫∑p, return tho√°t c·∫£ h√†m"
    )
    
    # Nested Loops (10 c√¢u)
    quiz.ask_question(
        "Nested loop l√† g√¨?",
        ["V√≤ng l·∫∑p trong v√≤ng l·∫∑p", "V√≤ng l·∫∑p song song", "V√≤ng l·∫∑p ng∆∞·ª£c", "V√≤ng l·∫∑p c√≥ ƒëi·ªÅu ki·ªán"],
        1,
        "Nested loop l√† v√≤ng l·∫∑p b√™n trong v√≤ng l·∫∑p kh√°c"
    )
    
    quiz.ask_question(
        "ƒê·ªÉ in ra b·∫£ng c·ª≠u ch∆∞∆°ng, ta c·∫ßn:",
        ["1 v√≤ng l·∫∑p", "2 v√≤ng l·∫∑p nested", "3 v√≤ng l·∫∑p", "Kh√¥ng c·∫ßn v√≤ng l·∫∑p"],
        2,
        "C·∫ßn 2 v√≤ng l·∫∑p: outer cho s·ªë th·ª© nh·∫•t, inner cho s·ªë th·ª© hai"
    )
    
    quiz.ask_question(
        "Complexity c·ªßa nested loop v·ªõi n ph·∫ßn t·ª≠ l√†:",
        ["O(n)", "O(n¬≤)", "O(2n)", "O(log n)"],
        2,
        "Nested loop c√≥ ƒë·ªô ph·ª©c t·∫°p O(n¬≤) v√¨ m·ªói ph·∫ßn t·ª≠ outer ch·∫°y n l·∫ßn inner"
    )
    
    quiz.ask_question(
        "ƒê·ªÉ in ra pattern tam gi√°c *, ta d√πng:",
        ["1 v√≤ng l·∫∑p v·ªõi range", "2 v√≤ng l·∫∑p nested", "While loop ƒë∆°n", "List comprehension"],
        2,
        "C·∫ßn outer loop cho s·ªë d√≤ng, inner loop cho s·ªë * m·ªói d√≤ng"
    )
    
    quiz.ask_question(
        "Trong nested loop, bi·∫øn c·ªßa v√≤ng l·∫∑p ngo√†i c√≥ accessible trong v√≤ng l·∫∑p trong kh√¥ng?",
        ["Kh√¥ng", "C√≥", "Ch·ªâ khi khai b√°o global", "Ch·ªâ trong for loop"],
        2,
        "Bi·∫øn outer loop c√≥ th·ªÉ truy c·∫≠p trong inner loop (scope rules)"
    )
    
    quiz.ask_question(
        "ƒê·ªÉ duy·ªát ma tr·∫≠n 2D, ta c·∫ßn:",
        ["1 v√≤ng l·∫∑p", "2 v√≤ng l·∫∑p nested", "3 v√≤ng l·∫∑p", "T√πy thu·ªôc k√≠ch th∆∞·ªõc"],
        2,
        "Ma tr·∫≠n 2D c·∫ßn 2 loops: m·ªôt cho h√†ng, m·ªôt cho c·ªôt"
    )
    
    quiz.ask_question(
        "Khi n√†o n√™n tr√°nh nested loop?",
        ["Khi data nh·ªè", "Khi c·∫ßn performance cao v·ªõi data l·ªõn", "Khi l√†m game", "Kh√¥ng bao gi·ªù"],
        2,
        "Nested loop c√≥ ƒë·ªô ph·ª©c t·∫°p cao, c·∫ßn c√¢n nh·∫Øc v·ªõi big data"
    )
    
    quiz.ask_question(
        "ƒê·ªÉ tho√°t kh·ªèi c·∫£ 2 v√≤ng l·∫∑p nested, ta c√≥ th·ªÉ:",
        ["D√πng break 2 l·∫ßn", "D√πng flag variable", "D√πng return trong function", "B v√† C ƒë·ªÅu ƒë√∫ng"],
        4,
        "Flag variable ho·∫∑c return trong function ƒë·ªÅu c√≥ th·ªÉ tho√°t nested loops"
    )
    
    quiz.ask_question(
        "List comprehension c√≥ th·ªÉ thay th·∫ø nested loop kh√¥ng?",
        ["Kh√¥ng", "C√≥, trong nhi·ªÅu tr∆∞·ªùng h·ª£p", "Ch·ªâ v·ªõi 2 levels", "Ch·ªâ v·ªõi for loop"],
        2,
        "List comprehension c√≥ th·ªÉ handle nhi·ªÅu levels nesting m·ªôt c√°ch g·ªçn g√†ng"
    )
    
    quiz.ask_question(
        "Performance c·ªßa nested loop ph·ª• thu·ªôc v√†o:",
        ["Ch·ªâ outer loop", "Ch·ªâ inner loop", "T√≠ch c·ªßa c·∫£ hai", "T·ªïng c·ªßa c·∫£ hai"],
        3,
        "Performance = outer_iterations √ó inner_iterations"
    )
    
    # ·ª®ng d·ª•ng th·ª±c t·∫ø (10 c√¢u)
    quiz.ask_question(
        "ƒê·ªÉ validate password v·ªõi nhi·ªÅu ƒëi·ªÅu ki·ªán, n√™n d√πng:",
        ["For loop qua t·ª´ng k√Ω t·ª±", "Multiple if statements", "While loop v·ªõi flags", "T·∫•t c·∫£ ƒë·ªÅu c√≥ th·ªÉ"],
        4,
        "T√πy approach: for loop check t·ª´ng char, if statements check rules, while loop retry"
    )
    
    quiz.ask_question(
        "Menu system th∆∞·ªùng d√πng lo·∫°i loop n√†o?",
        ["For loop", "While True v·ªõi break", "Nested loop", "List comprehension"],
        2,
        "while True cho ph√©p menu ch·∫°y li√™n t·ª•c ƒë·∫øn khi user ch·ªçn exit"
    )
    
    quiz.ask_question(
        "ƒê·ªÉ x·ª≠ l√Ω file CSV v·ªõi nhi·ªÅu d√≤ng, ta d√πng:",
        ["For loop qua t·ª´ng d√≤ng", "While loop ƒë·ªçc ƒë·∫øn EOF", "Nested loop cho cells", "A v√† C k·∫øt h·ª£p"],
        4,
        "For loop qua d√≤ng, c√≥ th·ªÉ c·∫ßn inner loop ƒë·ªÉ x·ª≠ l√Ω t·ª´ng cell"
    )
    
    quiz.ask_question(
        "Game loop th∆∞·ªùng c√≥ c·∫•u tr√∫c:",
        ["for i in range(10):", "while game_running:", "if player_win:", "def game():"],
        2,
        "Game loop c·∫ßn ch·∫°y li√™n t·ª•c ƒë·∫øn khi game over"
    )
    
    quiz.ask_question(
        "ƒê·ªÉ t√¨m ki·∫øm trong danh s√°ch, thu·∫≠t to√°n n√†o d√πng loop?",
        ["Linear search", "Binary search", "Bubble sort", "T·∫•t c·∫£ ƒë·ªÅu d√πng"],
        4,
        "H·∫ßu h·∫øt thu·∫≠t to√°n search v√† sort ƒë·ªÅu s·ª≠ d·ª•ng loops"
    )
    
    quiz.ask_question(
        "Animation trong game th∆∞·ªùng d√πng:",
        ["For loop v·ªõi sleep()", "While loop v·ªõi time control", "Nested loop cho frames", "B v√† C ƒë·ªÅu ƒë√∫ng"],
        4,
        "Animation c·∫ßn time control v√† c√≥ th·ªÉ c·∫ßn nested loops cho complex movements"
    )
    
    quiz.ask_question(
        "ƒê·ªÉ crawl web pages, ta th∆∞·ªùng d√πng:",
        ["For loop qua URLs", "While loop cho pagination", "Nested loop cho links", "T·∫•t c·∫£ ƒë·ªÅu ƒë√∫ng"],
        4,
        "Web crawling c√≥ th·ªÉ c·∫ßn nhi·ªÅu lo·∫°i loops t√πy theo structure"
    )
    
    quiz.ask_question(
        "Database queries v·ªõi nhi·ªÅu records th∆∞·ªùng d√πng:",
        ["For loop qua results", "While loop v·ªõi cursor", "Batch processing", "T·∫•t c·∫£ ƒë·ªÅu ƒë√∫ng"],
        4,
        "Database operations c√≥ nhi·ªÅu patterns s·ª≠ d·ª•ng loops"
    )
    
    quiz.ask_question(
        "Machine learning training loop th∆∞·ªùng c√≥:",
        ["For epochs", "For batches", "While not converged", "T·∫•t c·∫£ ƒë·ªÅu c√≥ th·ªÉ"],
        4,
        "ML training c√≥ th·ªÉ d√πng nhi·ªÅu lo·∫°i loops t√πy theo algorithm"
    )
    
    quiz.ask_question(
        "ƒê·ªÉ x·ª≠ l√Ω real-time data stream, ta d√πng:",
        ["For loop c·ªë ƒë·ªãnh", "While True v·ªõi data check", "If-else ƒë∆°n gi·∫£n", "Function recursion"],
        2,
        "Real-time processing c·∫ßn infinite loop ƒë·ªÉ li√™n t·ª•c check data m·ªõi"
    )
    
    # PH·∫¶N 2: C√ÇU H·ªéI CODING (10 c√¢u)
    
    quiz.ask_coding_question(
        "Vi·∫øt code in ra t·ªïng c√°c s·ªë t·ª´ 1 ƒë·∫øn 10",
        "1+2+3+...+10",
        "55",
        "C√≥ th·ªÉ d√πng for loop ho·∫∑c c√¥ng th·ª©c n*(n+1)/2"
    )
    
    quiz.ask_coding_question(
        "Vi·∫øt code t√¨m s·ªë l·ªõn nh·∫•t trong list [3,7,2,9,1]",
        "[3,7,2,9,1]",
        "9",
        "D√πng max() ho·∫∑c loop ƒë·ªÉ so s√°nh t·ª´ng ph·∫ßn t·ª≠"
    )
    
    quiz.ask_coding_question(
        "Vi·∫øt code ƒë·∫øm s·ªë ch·ªØ 'a' trong string 'banana'",
        "string: 'banana'",
        "3",
        "D√πng count() method ho·∫∑c loop qua t·ª´ng k√Ω t·ª±"
    )
    
    quiz.ask_coding_question(
        "Vi·∫øt code in ra c√°c s·ªë ch·∫µn t·ª´ 2 ƒë·∫øn 20",
        "2, 4, 6, ..., 20",
        "2 4 6 8 10 12 14 16 18 20",
        "D√πng range(2, 21, 2) ho·∫∑c if i%2==0"
    )
    
    quiz.ask_coding_question(
        "Vi·∫øt code t·∫°o list b√¨nh ph∆∞∆°ng c·ªßa c√°c s·ªë t·ª´ 1 ƒë·∫øn 5",
        "[1, 2, 3, 4, 5]",
        "[1, 4, 9, 16, 25]",
        "D√πng list comprehension ho·∫∑c loop append"
    )
    
    quiz.ask_coding_question(
        "Vi·∫øt code ƒë·∫£o ng∆∞·ª£c string 'python'",
        "string: 'python'",
        "nohtyp",
        "D√πng slicing [::-1] ho·∫∑c loop ng∆∞·ª£c"
    )
    
    quiz.ask_coding_question(
        "Vi·∫øt code ki·ªÉm tra s·ªë 17 c√≥ ph·∫£i s·ªë nguy√™n t·ªë",
        "number: 17",
        "True (17 l√† s·ªë nguy√™n t·ªë)",
        "Check chia h·∫øt cho c√°c s·ªë t·ª´ 2 ƒë·∫øn sqrt(n)"
    )
    
    quiz.ask_coding_question(
        "Vi·∫øt code t√¨m factorial c·ªßa 5 (5!)",
        "5! = 5*4*3*2*1",
        "120",
        "D√πng loop nh√¢n d·∫ßn ho·∫∑c recursion"
    )
    
    quiz.ask_coding_question(
        "Vi·∫øt code t·∫°o pattern: * ** *** (3 d√≤ng)",
        "Triangle pattern",
        "* ** ***",
        "D√πng nested loop: outer cho d√≤ng, inner cho s·ªë *"
    )
    
    quiz.ask_coding_question(
        "Vi·∫øt code t√¨m ch·ªâ s·ªë c·ªßa 'world' trong 'hello world'",
        "string: 'hello world', find: 'world'",
        "6",
        "D√πng find() method ho·∫∑c loop t√¨m substring"
    )
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi c√πng
    quiz.show_final_results()

# Ch·∫°y quiz
if __name__ == "__main__":
    try:
        run_quiz()
    except KeyboardInterrupt:
        print(Fore.YELLOW + "\n\nüö™ Quiz ƒë√£ ƒë∆∞·ª£c d·ª´ng. H·∫πn g·∫∑p l·∫°i!")
    except Exception as e:
        print(Fore.RED + f"\n‚ùå C√≥ l·ªói x·∫£y ra: {e}")
        print(Fore.CYAN + "Vui l√≤ng th·ª≠ l·∫°i!") 
"""
B√ÄI T·∫¨P 3: BREAK, CONTINUE & NESTED LOOPS
=========================================

B√†i t·∫≠p n√†y t·∫≠p trung v√†o break, continue v√† v√≤ng l·∫∑p l·ªìng nhau.
G·ªìm 8 ph·∫ßn t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao.

Y√™u c·∫ßu:
- Hi·ªÉu r√µ khi n√†o d√πng break vs continue
- Th√†nh th·∫°o nested loops
- Bi·∫øt c√°ch debug complex loops
- X√¢y d·ª±ng patterns v√† algorithms

Th·ªùi gian ∆∞·ªõc t√≠nh: 100-130 ph√∫t
"""

print("üéØ B√ÄI T·∫¨P 3: BREAK, CONTINUE & NESTED LOOPS")
print("=" * 50)

# =============================================================================
# PH·∫¶N A: BREAK STATEMENT C∆† B·∫¢N
# =============================================================================

print("\nüìñ PH·∫¶N A: BREAK STATEMENT C∆† B·∫¢N")
print("-" * 40)

# A.1. V√≠ d·ª•: Break trong for loop
print("A.1. V√≠ d·ª•: T√¨m s·ªë ƒë·∫ßu ti√™n chia h·∫øt cho 7")
for i in range(1, 50):
    print(f"Ki·ªÉm tra: {i}")
    if i % 7 == 0:
        print(f"üéØ T√¨m th·∫•y: {i}")
        break  # D·ª´ng ngay khi t√¨m th·∫•y
print("K·∫øt th√∫c t√¨m ki·∫øm!")

# A.2. V√≠ d·ª•: Break trong while loop
print("\nA.2. V√≠ d·ª•: Nh·∫≠p s·ªë ƒë·∫øn khi g·∫∑p s·ªë √¢m")
count = 0
total = 0
while True:
    try:
        number = float(input(f"Nh·∫≠p s·ªë th·ª© {count + 1}: "))
        if number < 0:
            print("üõë G·∫∑p s·ªë √¢m - D·ª´ng nh·∫≠p!")
            break
        count += 1
        total += number
        print(f"‚úÖ ƒê√£ th√™m {number}, t·ªïng = {total}")
    except ValueError:
        print("‚ùå Vui l√≤ng nh·∫≠p s·ªë!")
        
if count > 0:
    print(f"üìä K·∫øt qu·∫£: {count} s·ªë, t·ªïng = {total}, TB = {total/count:.2f}")

# A.3. V√≠ d·ª•: Break v·ªõi search
print("\nA.3. V√≠ d·ª•: T√¨m ki·∫øm trong danh s√°ch")
students = ["An", "B√¨nh", "Chi", "D≈©ng", "Lan"]
search_name = "Chi"

print(f"üîç T√¨m '{search_name}' trong {students}")
for i, student in enumerate(students):
    print(f"Ki·ªÉm tra v·ªã tr√≠ {i}: {student}")
    if student == search_name:
        print(f"‚úÖ T√¨m th·∫•y '{search_name}' t·∫°i v·ªã tr√≠ {i}!")
        break
else:
    print(f"‚ùå Kh√¥ng t√¨m th·∫•y '{search_name}'")

print("\nüèÉ‚Äç‚ôÇÔ∏è B√ÄI T·∫¨P PH·∫¶N A:")
print("1. T√¨m s·ªë nguy√™n t·ªë ƒë·∫ßu ti√™n > 20")
print("2. T√¨m s·ªë ho√†n h·∫£o ƒë·∫ßu ti√™n (1-100)")
print("3. Game ƒëo√°n s·ªë v·ªõi break khi ƒë√∫ng")
print("4. T√¨m t·ª´ d√†i nh·∫•t trong list")

# Vi·∫øt code b√†i t·∫≠p ·ªü ƒë√¢y:
print("\n--- B√ÄI L√ÄM PH·∫¶N A ---")

# B√†i 1: T√¨m s·ªë nguy√™n t·ªë ƒë·∫ßu ti√™n > 20


# B√†i 2: T√¨m s·ªë ho√†n h·∫£o ƒë·∫ßu ti√™n


# B√†i 3: Game ƒëo√°n s·ªë v·ªõi break


# B√†i 4: T√¨m t·ª´ d√†i nh·∫•t


# =============================================================================
# PH·∫¶N B: CONTINUE STATEMENT C∆† B·∫¢N
# =============================================================================

print("\nüìñ PH·∫¶N B: CONTINUE STATEMENT C∆† B·∫¢N")
print("-" * 40)

# B.1. V√≠ d·ª•: Continue b·ªè qua s·ªë ch·∫µn
print("B.1. V√≠ d·ª•: In c√°c s·ªë l·∫ª t·ª´ 1-10")
for i in range(1, 11):
    if i % 2 == 0:  # N·∫øu ch·∫µn
        continue    # B·ªè qua, kh√¥ng in
    print(f"S·ªë l·∫ª: {i}")

# B.2. V√≠ d·ª•: Continue v·ªõi validation
print("\nB.2. V√≠ d·ª•: X·ª≠ l√Ω danh s√°ch ƒëi·ªÉm, b·ªè qua ƒëi·ªÉm √¢m")
scores = [8.5, -1, 9.0, 7.5, -2, 6.8, 10]
valid_scores = []
total_valid = 0

for score in scores:
    if score < 0:
        print(f"‚ö†Ô∏è B·ªè qua ƒëi·ªÉm √¢m: {score}")
        continue  # B·ªè qua ƒëi·ªÉm √¢m
    
    valid_scores.append(score)
    total_valid += score
    print(f"‚úÖ ƒêi·ªÉm h·ª£p l·ªá: {score}")

print(f"üìä K·∫øt qu·∫£: {len(valid_scores)} ƒëi·ªÉm h·ª£p l·ªá, TB = {total_valid/len(valid_scores):.2f}")

# B.3. V√≠ d·ª•: Continue v·ªõi string processing
print("\nB.3. V√≠ d·ª•: ƒê·∫øm ch·ªâ ch·ªØ c√°i trong chu·ªói")
text = "Hello World 123!"
letter_count = 0
digit_count = 0

for char in text:
    if char.isspace():  # B·ªè qua kho·∫£ng tr·∫Øng
        continue
    elif char.isdigit():
        digit_count += 1
        continue
    elif char.isalpha():
        letter_count += 1
        print(f"Ch·ªØ c√°i: '{char}'")
    else:
        print(f"K√Ω t·ª± ƒë·∫∑c bi·ªát: '{char}'")

print(f"üìä Ch·ªØ c√°i: {letter_count}, S·ªë: {digit_count}")

print("\nüèÉ‚Äç‚ôÇÔ∏è B√ÄI T·∫¨P PH·∫¶N B:")
print("1. In c√°c s·ªë kh√¥ng chia h·∫øt cho 3 (1-30)")
print("2. X·ª≠ l√Ω email list, b·ªè qua email kh√¥ng h·ª£p l·ªá")
print("3. ƒê·∫øm nguy√™n √¢m, b·ªè qua consonants")
print("4. T√≠nh t·ªïng s·ªë d∆∞∆°ng, b·ªè qua s·ªë √¢m v√† 0")

# Vi·∫øt code b√†i t·∫≠p ·ªü ƒë√¢y:
print("\n--- B√ÄI L√ÄM PH·∫¶N B ---")

# B√†i 1: S·ªë kh√¥ng chia h·∫øt cho 3


# B√†i 2: X·ª≠ l√Ω email list


# B√†i 3: ƒê·∫øm nguy√™n √¢m


# B√†i 4: T·ªïng s·ªë d∆∞∆°ng


# =============================================================================
# PH·∫¶N C: BREAK VS CONTINUE - SO S√ÅNH
# =============================================================================

print("\nüìñ PH·∫¶N C: BREAK VS CONTINUE COMPARISON")
print("-" * 40)

# C.1. Demo kh√°c bi·ªát break vs continue
print("C.1. Demo: Break vs Continue")

print("\nüõë V·ªöI BREAK:")
for i in range(1, 6):
    if i == 3:
        print(f"BREAK t·∫°i {i} - D·ª™NG TO√ÄN B·ªò LOOP")
        break
    print(f"S·ªë: {i}")
print("Sau loop v·ªõi break\n")

print("‚è© V·ªöI CONTINUE:")
for i in range(1, 6):
    if i == 3:
        print(f"CONTINUE t·∫°i {i} - B·ªé QUA ITERATION N√ÄY")
        continue
    print(f"S·ªë: {i}")
print("Sau loop v·ªõi continue")

# C.2. V√≠ d·ª•: Input processing v·ªõi break/continue
print("\nC.2. V√≠ d·ª•: X·ª≠ l√Ω input commands")
commands = ["start", "invalid", "process", "stop", "end"]

for command in commands:
    print(f"\nX·ª≠ l√Ω command: '{command}'")
    
    if command == "invalid":
        print("‚è© CONTINUE: B·ªè qua command kh√¥ng h·ª£p l·ªá")
        continue
    
    if command == "stop":
        print("üõë BREAK: D·ª´ng x·ª≠ l√Ω t·∫•t c·∫£ commands")
        break
    
    # X·ª≠ l√Ω command h·ª£p l·ªá
    print(f"‚úÖ Th·ª±c thi: {command}")

print("\nüèÉ‚Äç‚ôÇÔ∏è B√ÄI T·∫¨P PH·∫¶N C:")
print("1. Menu v·ªõi continue cho invalid input, break cho quit")
print("2. Password attempts v·ªõi continue cho wrong, break cho correct")

# Vi·∫øt code b√†i t·∫≠p ·ªü ƒë√¢y:
print("\n--- B√ÄI L√ÄM PH·∫¶N C ---")

# B√†i 1: Menu v·ªõi continue/break


# B√†i 2: Password v·ªõi continue/break


# =============================================================================
# PH·∫¶N D: NESTED LOOPS C∆† B·∫¢N
# =============================================================================

print("\nüìñ PH·∫¶N D: NESTED LOOPS C∆† B·∫¢N")
print("-" * 40)

# D.1. V√≠ d·ª•: Nested for loops
print("D.1. V√≠ d·ª•: B·∫£ng nh√¢n 2D")
for i in range(1, 4):
    print(f"\nB·∫£ng nh√¢n {i}:")
    for j in range(1, 6):
        result = i * j
        print(f"{i} x {j} = {result:2}", end="  ")
    print()  # Xu·ªëng d√≤ng

# D.2. V√≠ d·ª•: Matrix processing
print("\nD.2. V√≠ d·ª•: X·ª≠ l√Ω ma tr·∫≠n")
matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]

print("Ma tr·∫≠n:")
for i in range(len(matrix)):
    for j in range(len(matrix[i])):
        print(f"{matrix[i][j]:3}", end="")
    print()

# T√≠nh t·ªïng
total_sum = 0
for row in matrix:
    for element in row:
        total_sum += element

print(f"T·ªïng t·∫•t c·∫£ ph·∫ßn t·ª≠: {total_sum}")

# D.3. V√≠ d·ª•: Nested while loops
print("\nD.3. V√≠ d·ª•: Nested while v·ªõi coordinates")
x = 0
while x < 3:
    y = 0
    while y < 3:
        print(f"({x},{y})", end=" ")
        y += 1
    print()  # Xu·ªëng d√≤ng
    x += 1

print("\nüèÉ‚Äç‚ôÇÔ∏è B√ÄI T·∫¨P PH·∫¶N D:")
print("1. In b·∫£ng c·ª≠u ch∆∞∆°ng t·ª´ 2-5")
print("2. T·∫°o ma tr·∫≠n identity 4x4")
print("3. In t·ªça ƒë·ªô c·ªßa b√†n c·ªù 8x8")

# Vi·∫øt code b√†i t·∫≠p ·ªü ƒë√¢y:
print("\n--- B√ÄI L√ÄM PH·∫¶N D ---")

# B√†i 1: B·∫£ng c·ª≠u ch∆∞∆°ng 2-5


# B√†i 2: Ma tr·∫≠n identity


# B√†i 3: T·ªça ƒë·ªô b√†n c·ªù


# =============================================================================
# PH·∫¶N E: PATTERNS V·ªöI NESTED LOOPS
# =============================================================================

print("\nüìñ PH·∫¶N E: PATTERNS V·ªöI NESTED LOOPS")
print("-" * 40)

# E.1. V√≠ d·ª•: Tam gi√°c s·ªë
print("E.1. V√≠ d·ª•: Tam gi√°c s·ªë")
for i in range(1, 6):
    for j in range(1, i + 1):
        print(j, end=" ")
    print()

# E.2. V√≠ d·ª•: Tam gi√°c sao cƒÉn gi·ªØa
print("\nE.2. V√≠ d·ª•: Tam gi√°c sao cƒÉn gi·ªØa")
height = 5
for i in range(1, height + 1):
    # In spaces
    for j in range(height - i):
        print(" ", end="")
    # In stars
    for k in range(2 * i - 1):
        print("*", end="")
    print()

# E.3. V√≠ d·ª•: Pattern ch·ªØ c√°i
print("\nE.3. V√≠ d·ª•: Pattern ch·ªØ c√°i")
for i in range(4):
    for j in range(i + 1):
        char = chr(ord('A') + j)
        print(char, end=" ")
    print()

# E.4. V√≠ d·ª•: Chessboard pattern
print("\nE.4. V√≠ d·ª•: Pattern b√†n c·ªù")
size = 4
for i in range(size):
    for j in range(size):
        if (i + j) % 2 == 0:
            print("X", end=" ")
        else:
            print("O", end=" ")
    print()

print("\nüèÉ‚Äç‚ôÇÔ∏è B√ÄI T·∫¨P PH·∫¶N E:")
print("1. T·∫°o kim c∆∞∆°ng sao 5 t·∫ßng")
print("2. Pattern s·ªë theo d·∫°ng Pascal triangle")
print("3. T·∫°o pattern spiral numbers")
print("4. In b·∫£ng ASCII characters")

# Vi·∫øt code b√†i t·∫≠p ·ªü ƒë√¢y:
print("\n--- B√ÄI L√ÄM PH·∫¶N E ---")

# B√†i 1: Kim c∆∞∆°ng sao


# B√†i 2: Pascal triangle


# B√†i 3: Spiral numbers


# B√†i 4: ASCII characters


# =============================================================================
# PH·∫¶N F: BREAK/CONTINUE TRONG NESTED LOOPS
# =============================================================================

print("\nüìñ PH·∫¶N F: BREAK/CONTINUE TRONG NESTED LOOPS")
print("-" * 50)

# F.1. V√≠ d·ª•: Break ch·ªâ inner loop
print("F.1. V√≠ d·ª•: Break inner loop")
for i in range(1, 4):
    print(f"Outer loop i={i}")
    for j in range(1, 6):
        if j == 3:
            print(f"  Break inner t·∫°i j={j}")
            break  # Ch·ªâ tho√°t inner loop
        print(f"  Inner loop j={j}")
    print(f"Ti·∫øp t·ª•c outer i={i}")

# F.2. V√≠ d·ª•: Break outer loop v·ªõi flag
print("\nF.2. V√≠ d·ª•: Break outer loop v·ªõi flag")
found = False
target = 15

for i in range(1, 6):
    for j in range(1, 6):
        product = i * j
        print(f"{i} x {j} = {product}")
        if product == target:
            print(f"üéØ T√¨m th·∫•y {target}!")
            found = True
            break
    if found:
        print("Tho√°t outer loop!")
        break

# F.3. V√≠ d·ª•: Continue trong nested
print("\nF.3. V√≠ d·ª•: Continue trong nested loops")
for i in range(1, 4):
    print(f"Row {i}:")
    for j in range(1, 6):
        if j % 2 == 0:  # B·ªè qua s·ªë ch·∫µn
            continue
        print(f"  Column {j} (odd)")

# F.4. V√≠ d·ª•: Search trong 2D array
print("\nF.4. V√≠ d·ª•: T√¨m ki·∫øm trong ma tr·∫≠n")
matrix_2d = [
    [1, 3, 5],
    [7, 9, 11],
    [13, 15, 17]
]
search_value = 9
found_position = None

for i in range(len(matrix_2d)):
    for j in range(len(matrix_2d[i])):
        print(f"Ki·ªÉm tra [{i}][{j}] = {matrix_2d[i][j]}")
        if matrix_2d[i][j] == search_value:
            found_position = (i, j)
            print(f"‚úÖ T√¨m th·∫•y {search_value} t·∫°i ({i}, {j})")
            break
    if found_position:
        break

print("\nüèÉ‚Äç‚ôÇÔ∏è B√ÄI T·∫¨P PH·∫¶N F:")
print("1. T√¨m c·∫∑p s·ªë c√≥ t√≠ch = 24 trong range(1,10)")
print("2. T√¨m t·∫•t c·∫£ ƒëi·ªÉm c√≥ t·ªïng t·ªça ƒë·ªô = 5")
print("3. Matrix search v·ªõi break khi t√¨m th·∫•y")

# Vi·∫øt code b√†i t·∫≠p ·ªü ƒë√¢y:
print("\n--- B√ÄI L√ÄM PH·∫¶N F ---")

# B√†i 1: T√¨m c·∫∑p s·ªë c√≥ t√≠ch = 24


# B√†i 2: ƒêi·ªÉm c√≥ t·ªïng t·ªça ƒë·ªô = 5


# B√†i 3: Matrix search


# =============================================================================
# PH·∫¶N G: ALGORITHMS V·ªöI NESTED LOOPS
# =============================================================================

print("\nüìñ PH·∫¶N G: ALGORITHMS V·ªöI NESTED LOOPS")
print("-" * 40)

# G.1. V√≠ d·ª•: Bubble sort ƒë∆°n gi·∫£n
print("G.1. V√≠ d·ª•: Bubble Sort")
numbers = [64, 34, 25, 12, 22, 11, 90]
print(f"M·∫£ng ban ƒë·∫ßu: {numbers}")

n = len(numbers)
for i in range(n):
    print(f"\nL∆∞·ª£t {i + 1}:")
    for j in range(0, n - i - 1):
        if numbers[j] > numbers[j + 1]:
            # Swap
            numbers[j], numbers[j + 1] = numbers[j + 1], numbers[j]
            print(f"  Swap {numbers[j+1]} v√† {numbers[j]}: {numbers}")
        else:
            print(f"  Kh√¥ng swap {numbers[j]} v√† {numbers[j+1]}")

print(f"M·∫£ng ƒë√£ s·∫Øp x·∫øp: {numbers}")

# G.2. V√≠ d·ª•: Finding all pairs
print("\nG.2. V√≠ d·ª•: T√¨m t·∫•t c·∫£ c·∫∑p s·ªë c√≥ t·ªïng = 10")
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]
target_sum = 10
pairs = []

for i in range(len(arr)):
    for j in range(i + 1, len(arr)):  # Tr√°nh l·∫∑p l·∫°i
        if arr[i] + arr[j] == target_sum:
            pair = (arr[i], arr[j])
            pairs.append(pair)
            print(f"T√¨m th·∫•y c·∫∑p: {arr[i]} + {arr[j]} = {target_sum}")

print(f"T·∫•t c·∫£ c·∫∑p: {pairs}")

# G.3. V√≠ d·ª•: Multiplication table generator
print("\nG.3. V√≠ d·ª•: T·∫°o b·∫£ng nh√¢n ho√†n ch·ªânh")
size = 5
print("   ", end="")
for i in range(1, size + 1):
    print(f"{i:4}", end="")
print()

for i in range(1, size + 1):
    print(f"{i:2}:", end="")
    for j in range(1, size + 1):
        print(f"{i*j:4}", end="")
    print()

print("\nüèÉ‚Äç‚ôÇÔ∏è B√ÄI T·∫¨P PH·∫¶N G:")
print("1. Implement Selection Sort")
print("2. T√¨m t·∫•t c·∫£ triplets c√≥ t·ªïng = 15")
print("3. T·∫°o b·∫£ng truth table cho AND/OR")

# Vi·∫øt code b√†i t·∫≠p ·ªü ƒë√¢y:
print("\n--- B√ÄI L√ÄM PH·∫¶N G ---")

# B√†i 1: Selection Sort


# B√†i 2: Triplets t·ªïng = 15


# B√†i 3: Truth table


# =============================================================================
# PH·∫¶N H: TH·ª∞C H√ÄNH T·ªîNG H·ª¢P
# =============================================================================

print("\nüìñ PH·∫¶N H: TH·ª∞C H√ÄNH T·ªîNG H·ª¢P")
print("-" * 40)

# H.1. V√≠ d·ª•: Tic-tac-toe board checker
print("H.1. V√≠ d·ª•: Ki·ªÉm tra Tic-tac-toe")
board = [
    ['X', 'O', 'X'],
    ['O', 'X', 'O'],
    ['X', 'O', 'X']
]

print("B√†n c·ªù:")
for row in board:
    for cell in row:
        print(cell, end=" ")
    print()

# Ki·ªÉm tra h√†ng ngang
for i in range(3):
    if board[i][0] == board[i][1] == board[i][2] != ' ':
        print(f"Th·∫Øng h√†ng {i}: {board[i][0]}")

# Ki·ªÉm tra c·ªôt d·ªçc
for j in range(3):
    if board[0][j] == board[1][j] == board[2][j] != ' ':
        print(f"Th·∫Øng c·ªôt {j}: {board[0][j]}")

# H.2. V√≠ d·ª•: Password brute force (educational)
print("\nH.2. V√≠ d·ª•: Password cracking simulation")
correct_password = "AB"
charset = "ABCD"
found = False

print(f"Th·ª≠ t·∫•t c·∫£ combination 2 k√Ω t·ª± t·ª´ '{charset}':")
for char1 in charset:
    if found:
        break
    for char2 in charset:
        attempt = char1 + char2
        print(f"Th·ª≠: {attempt}")
        if attempt == correct_password:
            print(f"‚úÖ T√¨m th·∫•y password: {attempt}")
            found = True
            break

print("\nüèÉ‚Äç‚ôÇÔ∏è B√ÄI T·∫¨P PH·∫¶N H:")
print("1. Sudoku row/column validator")
print("2. Conway's Game of Life (1 generation)")
print("3. Matrix multiplication")

# Vi·∫øt code b√†i t·∫≠p ·ªü ƒë√¢y:
print("\n--- B√ÄI L√ÄM PH·∫¶N H ---")

# B√†i 1: Sudoku validator


# B√†i 2: Game of Life


# B√†i 3: Matrix multiplication


# =============================================================================
# T·ªîNG K·∫æT V√Ä ƒê√ÅNH GI√Å
# =============================================================================

print("\n" + "="*50)
print("üèÜ T·ªîNG K·∫æT B√ÄI T·∫¨P 3")
print("="*50)

print("""
KI·∫æN TH·ª®C ƒê√É H·ªåC:
‚úÖ Break statement v√† c√°ch s·ª≠ d·ª•ng
‚úÖ Continue statement v√† ·ª©ng d·ª•ng
‚úÖ So s√°nh break vs continue
‚úÖ Nested loops c∆° b·∫£n
‚úÖ Patterns v·ªõi nested loops
‚úÖ Break/continue trong nested loops
‚úÖ Algorithms v·ªõi nested loops
‚úÖ Complex problem solving

ƒêI·ªÇM ƒê√ÅNH GI√Å B·∫¢N TH√ÇN:
- Ph·∫ßn A (Break c∆° b·∫£n): ___/4
- Ph·∫ßn B (Continue c∆° b·∫£n): ___/4
- Ph·∫ßn C (Break vs Continue): ___/2
- Ph·∫ßn D (Nested loops): ___/3
- Ph·∫ßn E (Patterns): ___/4
- Ph·∫ßn F (Break/Continue nested): ___/3
- Ph·∫ßn G (Algorithms): ___/3
- Ph·∫ßn H (T·ªïng h·ª£p): ___/3

T·ªîNG ƒêI·ªÇM: ___/26

CHU·∫®N ƒê√ÅNH GI√Å:
ü•á 23-26 ƒëi·ªÉm: Xu·∫•t s·∫Øc! Master level
ü•à 19-22 ƒëi·ªÉm: Gi·ªèi! Advanced level
ü•â 15-18 ƒëi·ªÉm: Kh√° - Intermediate level
üìö 11-14 ƒëi·ªÉm: C·∫ßn √¥n l·∫°i
üí™ <11 ƒëi·ªÉm: H·ªçc l·∫°i t·ª´ ƒë·∫ßu

SKILLS CHUY√äN M√îN PH√ÅT TRI·ªÇN:
‚ñ° Loop control flow mastery
‚ñ° Pattern recognition & creation
‚ñ° Algorithm thinking
‚ñ° Code optimization awareness
‚ñ° Debugging complex loops
‚ñ° Problem decomposition

FEEDBACK V√Ä REFLECTION:
- Concept kh√≥ nh·∫•t: ________________
- Algorithm th√∫ v·ªã nh·∫•t: ____________
- Pattern ·∫•n t∆∞·ª£ng nh·∫•t: ____________
- ·ª®ng d·ª•ng th·ª±c t·∫ø nghƒ© ra: _________
- K·ªπ nƒÉng c·∫ßn c·∫£i thi·ªán: ____________

NEXT LEVEL GOALS:
‚ñ° T·ªëi ∆∞u h√≥a algorithms
‚ñ° X·ª≠ l√Ω big data v·ªõi loops
‚ñ° Advanced pattern generation
‚ñ° Game development
‚ñ° Data structures implementation
""")

print("üî• S·∫µn s√†ng cho B√†i T·∫≠p 4: ·ª®ng D·ª•ng Th·ª±c T·∫ø!")

# =============================================================================
# BONUS: ADVANCED CHALLENGES (TU·ª≤ CH·ªåN)
# =============================================================================

print("\nüåü BONUS - ADVANCED CHALLENGES:")
print("Ch·ªâ th·ª≠ th√°ch khi ƒë√£ th√†nh th·∫°o t·∫•t c·∫£!")
print("-" * 50)

print("1. üß© Fractal Patterns Generator")
print("2. üéØ Prime Number Sieve")
print("3. üîÑ Palindrome Pyramid")
print("4. üé≤ Dice Roll Statistics")
print("5. üèóÔ∏è ASCII Art Generator")

# Advanced challenges:
print("\n--- ADVANCED CHALLENGE CODE ---")

# Ch·ªçn 1-2 challenges ƒë·ªÉ th·ª±c hi·ªán:


print("\nüéÜ CH√öC M·ª™NG! B·∫†N ƒê√É MASTER BREAK/CONTINUE & NESTED LOOPS!") 
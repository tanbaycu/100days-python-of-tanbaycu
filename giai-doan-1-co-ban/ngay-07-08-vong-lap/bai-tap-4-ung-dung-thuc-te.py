"""
B√ÄI T·∫¨P 4: ·ª®NG D·ª§NG TH·ª∞C T·∫æ V·ªöI V√íNG L·∫∂P
=========================================

6 ·ª©ng d·ª•ng th·ª±c t·∫ø ho√†n ch·ªânh s·ª≠ d·ª•ng for/while loops:
1. H·ªá th·ªëng ATM
2. Game Quiz 
3. Qu·∫£n l√Ω h·ªçc sinh
4. Weather tracker
5. Shopping cart
6. Password generator

M·ªói ·ª©ng d·ª•ng c√≥ ƒë·∫ßy ƒë·ªß features v√† error handling.
Th·ªùi gian ∆∞·ªõc t√≠nh: 150-200 ph√∫t
"""

import random
import string
from datetime import datetime

print("üéØ B√ÄI T·∫¨P 4: ·ª®NG D·ª§NG TH·ª∞C T·∫æ V·ªöI V√íNG L·∫∂P")
print("=" * 50)

# =============================================================================
# ·ª®NG D·ª§NG 1: H·ªÜ TH·ªêNG ATM N√ÇNG CAO
# =============================================================================

def atm_system():
    """H·ªá th·ªëng ATM v·ªõi nhi·ªÅu t√≠nh nƒÉng"""
    print("\nüè¶ ·ª®NG D·ª§NG 1: H·ªÜ TH·ªêNG ATM N√ÇNG CAO")
    print("=" * 40)
    
    # D·ªØ li·ªáu t√†i kho·∫£n
    accounts = {
        "1234": {"name": "Nguy·ªÖn VƒÉn An", "balance": 1000000, "pin": "1234"},
        "5678": {"name": "Tr·∫ßn Th·ªã B√¨nh", "balance": 2500000, "pin": "5678"},
        "9999": {"name": "L√™ Ho√†ng Chi", "balance": 500000, "pin": "9999"}
    }
    
    transaction_history = []
    current_account = None
    
    def login():
        """X√°c th·ª±c ƒëƒÉng nh·∫≠p"""
        nonlocal current_account
        
        print("\nüîê ƒêƒÇNG NH·∫¨P ATM")
        for attempt in range(3):
            card_number = input("S·ªë th·∫ª: ")
            pin = input("PIN: ")
            
            if card_number in accounts and accounts[card_number]["pin"] == pin:
                current_account = card_number
                print(f"‚úÖ Ch√†o m·ª´ng {accounts[card_number]['name']}!")
                return True
            else:
                remaining = 2 - attempt
                if remaining > 0:
                    print(f"‚ùå Th√¥ng tin kh√¥ng ƒë√∫ng! C√≤n {remaining} l·∫ßn th·ª≠.")
                else:
                    print("üö´ Th·∫ª b·ªã kh√≥a! Li√™n h·ªá ng√¢n h√†ng.")
                    return False
        return False
    
    def check_balance():
        """Ki·ªÉm tra s·ªë d∆∞"""
        balance = accounts[current_account]["balance"]
        print(f"üí∞ S·ªë d∆∞ hi·ªán t·∫°i: {balance:,}ƒë")
        return balance
    
    def withdraw_money():
        """R√∫t ti·ªÅn"""
        balance = accounts[current_account]["balance"]
        print(f"üí∞ S·ªë d∆∞ hi·ªán t·∫°i: {balance:,}ƒë")
        
        while True:
            try:
                amount = int(input("S·ªë ti·ªÅn c·∫ßn r√∫t: "))
                
                if amount <= 0:
                    print("‚ùå S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0!")
                    continue
                elif amount > balance:
                    print("‚ùå S·ªë d∆∞ kh√¥ng ƒë·ªß!")
                    continue
                elif amount % 50000 != 0:
                    print("‚ùå Ch·ªâ c√≥ th·ªÉ r√∫t b·ªôi s·ªë c·ªßa 50,000ƒë!")
                    continue
                else:
                    accounts[current_account]["balance"] -= amount
                    transaction_history.append({
                        "type": "R√∫t ti·ªÅn",
                        "amount": amount,
                        "time": datetime.now().strftime("%H:%M:%S"),
                        "account": current_account
                    })
                    print(f"‚úÖ R√∫t {amount:,}ƒë th√†nh c√¥ng!")
                    print(f"S·ªë d∆∞ c√≤n l·∫°i: {accounts[current_account]['balance']:,}ƒë")
                    break
            except ValueError:
                print("‚ùå Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá!")
    
    def deposit_money():
        """N·∫°p ti·ªÅn"""
        while True:
            try:
                amount = int(input("S·ªë ti·ªÅn n·∫°p: "))
                
                if amount <= 0:
                    print("‚ùå S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0!")
                    continue
                else:
                    accounts[current_account]["balance"] += amount
                    transaction_history.append({
                        "type": "N·∫°p ti·ªÅn",
                        "amount": amount,
                        "time": datetime.now().strftime("%H:%M:%S"),
                        "account": current_account
                    })
                    print(f"‚úÖ N·∫°p {amount:,}ƒë th√†nh c√¥ng!")
                    print(f"S·ªë d∆∞ m·ªõi: {accounts[current_account]['balance']:,}ƒë")
                    break
            except ValueError:
                print("‚ùå Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá!")
    
    def transfer_money():
        """Chuy·ªÉn ti·ªÅn"""
        print("\nüí∏ CHUY·ªÇN TI·ªÄN")
        
        # Hi·ªÉn th·ªã danh s√°ch t√†i kho·∫£n
        print("Danh s√°ch t√†i kho·∫£n:")
        for acc_num, info in accounts.items():
            if acc_num != current_account:
                print(f"- {acc_num}: {info['name']}")
        
        target_account = input("S·ªë t√†i kho·∫£n ƒë√≠ch: ")
        
        if target_account == current_account:
            print("‚ùå Kh√¥ng th·ªÉ chuy·ªÉn cho ch√≠nh m√¨nh!")
            return
        elif target_account not in accounts:
            print("‚ùå T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i!")
            return
        
        while True:
            try:
                amount = int(input("S·ªë ti·ªÅn chuy·ªÉn: "))
                
                if amount <= 0:
                    print("‚ùå S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0!")
                    continue
                elif amount > accounts[current_account]["balance"]:
                    print("‚ùå S·ªë d∆∞ kh√¥ng ƒë·ªß!")
                    continue
                else:
                    # Th·ª±c hi·ªán chuy·ªÉn ti·ªÅn
                    accounts[current_account]["balance"] -= amount
                    accounts[target_account]["balance"] += amount
                    
                    transaction_history.append({
                        "type": f"Chuy·ªÉn ti·ªÅn ƒë·∫øn {target_account}",
                        "amount": amount,
                        "time": datetime.now().strftime("%H:%M:%S"),
                        "account": current_account
                    })
                    
                    print(f"‚úÖ Chuy·ªÉn {amount:,}ƒë ƒë·∫øn {accounts[target_account]['name']} th√†nh c√¥ng!")
                    print(f"S·ªë d∆∞ c√≤n l·∫°i: {accounts[current_account]['balance']:,}ƒë")
                    break
            except ValueError:
                print("‚ùå Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá!")
    
    def view_history():
        """Xem l·ªãch s·ª≠ giao d·ªãch"""
        print("\nüìú L·ªäCH S·ª¨ GIAO D·ªäCH")
        user_transactions = [t for t in transaction_history if t["account"] == current_account]
        
        if not user_transactions:
            print("Ch∆∞a c√≥ giao d·ªãch n√†o!")
            return
        
        for i, trans in enumerate(user_transactions, 1):
            print(f"{i}. {trans['time']} - {trans['type']}: {trans['amount']:,}ƒë")
    
    # Main ATM menu
    if not login():
        return
    
    while True:
        print(f"\nüí≥ ATM MENU - {accounts[current_account]['name']}")
        print("1. Ki·ªÉm tra s·ªë d∆∞")
        print("2. R√∫t ti·ªÅn")
        print("3. N·∫°p ti·ªÅn")
        print("4. Chuy·ªÉn ti·ªÅn")
        print("5. L·ªãch s·ª≠ giao d·ªãch")
        print("6. Tho√°t")
        
        choice = input("Ch·ªçn (1-6): ")
        
        if choice == '1':
            check_balance()
        elif choice == '2':
            withdraw_money()
        elif choice == '3':
            deposit_money()
        elif choice == '4':
            transfer_money()
        elif choice == '5':
            view_history()
        elif choice == '6':
            print("üëã C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng ATM!")
            break
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")

# =============================================================================
# ·ª®NG D·ª§NG 2: GAME QUIZ T∆Ø∆†NG T√ÅC
# =============================================================================

def quiz_game():
    """Game quiz v·ªõi nhi·ªÅu ch·ªß ƒë·ªÅ v√† scoring"""
    print("\nüß† ·ª®NG D·ª§NG 2: GAME QUIZ T∆Ø∆†NG T√ÅC")
    print("=" * 40)
    
    # Database c√¢u h·ªèi
    questions_db = {
        "python": [
            {"q": "Python ƒë∆∞·ª£c t·∫°o b·ªüi ai?", "a": ["Guido van Rossum", "Bill Gates", "Steve Jobs", "Mark Zuckerberg"], "correct": 0},
            {"q": "C√∫ ph√°p n√†o ƒë√∫ng ƒë·ªÉ in Hello World?", "a": ["print('Hello World')", "echo('Hello World')", "console.log('Hello World')", "printf('Hello World')"], "correct": 0},
            {"q": "Python l√† ng√¥n ng·ªØ g√¨?", "a": ["Compiled", "Interpreted", "Assembly", "Machine"], "correct": 1},
            {"q": "Ph·∫ßn m·ªü r·ªông file Python l√† g√¨?", "a": [".txt", ".py", ".python", ".code"], "correct": 1},
            {"q": "T·ª´ kh√≥a n√†o d√πng ƒë·ªÉ t·∫°o function?", "a": ["function", "def", "func", "define"], "correct": 1}
        ],
        "math": [
            {"q": "2 + 2 = ?", "a": ["3", "4", "5", "6"], "correct": 1},
            {"q": "CƒÉn b·∫≠c 2 c·ªßa 16 l√†?", "a": ["2", "4", "6", "8"], "correct": 1},
            {"q": "œÄ (pi) x·∫•p x·ªâ b·∫±ng?", "a": ["3.14", "2.71", "1.41", "1.73"], "correct": 0},
            {"q": "10! (10 giai th·ª´a) = ?", "a": ["100", "1000", "3628800", "10000"], "correct": 2},
            {"q": "Sin(90¬∞) = ?", "a": ["0", "1", "0.5", "-1"], "correct": 1}
        ],
        "general": [
            {"q": "Th·ªß ƒë√¥ c·ªßa Vi·ªát Nam?", "a": ["H·ªì Ch√≠ Minh", "H√† N·ªôi", "ƒê√† N·∫µng", "C·∫ßn Th∆°"], "correct": 1},
            {"q": "H√†nh tinh n√†o g·∫ßn M·∫∑t Tr·ªùi nh·∫•t?", "a": ["Sao Kim", "Tr√°i ƒê·∫•t", "Sao Th·ªßy", "Sao H·ªèa"], "correct": 2},
            {"q": "Ai vi·∫øt Romeo v√† Juliet?", "a": ["Charles Dickens", "William Shakespeare", "Mark Twain", "Jane Austen"], "correct": 1},
            {"q": "1 km = ? m", "a": ["100", "1000", "10000", "10"], "correct": 1},
            {"q": "Nguy√™n t·ªë h√≥a h·ªçc c·ªßa n∆∞·ªõc?", "a": ["H2O", "CO2", "O2", "H2"], "correct": 0}
        ]
    }
    
    player_stats = {
        "name": "",
        "total_questions": 0,
        "correct_answers": 0,
        "topics_played": set(),
        "high_score": 0
    }
    
    def get_player_info():
        """L·∫•y th√¥ng tin ng∆∞·ªùi ch∆°i"""
        while True:
            name = input("T√™n c·ªßa b·∫°n: ").strip()
            if name:
                player_stats["name"] = name
                print(f"Ch√†o m·ª´ng {name} ƒë·∫øn v·ªõi Quiz Game! üéÆ")
                break
            else:
                print("‚ùå Vui l√≤ng nh·∫≠p t√™n!")
    
    def choose_topic():
        """Ch·ªçn ch·ªß ƒë·ªÅ"""
        print("\nüìö CH·ªåN CH·ª¶ ƒê·ªÄ:")
        topics = list(questions_db.keys())
        
        for i, topic in enumerate(topics, 1):
            print(f"{i}. {topic.title()}")
        print(f"{len(topics) + 1}. Random Mix")
        
        while True:
            try:
                choice = int(input("Ch·ªçn ch·ªß ƒë·ªÅ: ")) - 1
                
                if 0 <= choice < len(topics):
                    return topics[choice]
                elif choice == len(topics):
                    return "random"
                else:
                    print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
            except ValueError:
                print("‚ùå Vui l√≤ng nh·∫≠p s·ªë!")
    
    def play_quiz(topic):
        """Ch∆°i quiz"""
        if topic == "random":
            # Mix questions from all topics
            all_questions = []
            for topic_questions in questions_db.values():
                all_questions.extend(topic_questions)
            questions = random.sample(all_questions, min(10, len(all_questions)))
            topic_name = "Random Mix"
        else:
            questions = questions_db[topic].copy()
            random.shuffle(questions)
            topic_name = topic.title()
        
        score = 0
        question_count = len(questions)
        
        print(f"\nüéØ QUIZ: {topic_name}")
        print(f"C√≥ {question_count} c√¢u h·ªèi. M·ªói c√¢u ƒë√∫ng = 10 ƒëi·ªÉm")
        print("-" * 40)
        
        for i, q_data in enumerate(questions, 1):
            print(f"\nC√¢u {i}/{question_count}: {q_data['q']}")
            
            # Hi·ªÉn th·ªã ƒë√°p √°n
            for j, answer in enumerate(q_data['a']):
                print(f"{j + 1}. {answer}")
            
            # Nh·∫≠n ƒë√°p √°n t·ª´ user
            while True:
                try:
                    user_answer = int(input("ƒê√°p √°n c·ªßa b·∫°n (1-4): ")) - 1
                    
                    if 0 <= user_answer <= 3:
                        break
                    else:
                        print("‚ùå Vui l√≤ng ch·ªçn 1-4!")
                except ValueError:
                    print("‚ùå Vui l√≤ng nh·∫≠p s·ªë!")
            
            # Ki·ªÉm tra ƒë√°p √°n
            if user_answer == q_data['correct']:
                print("‚úÖ Ch√≠nh x√°c! +10 ƒëi·ªÉm")
                score += 10
                player_stats["correct_answers"] += 1
            else:
                correct_answer = q_data['a'][q_data['correct']]
                print(f"‚ùå Sai! ƒê√°p √°n ƒë√∫ng: {correct_answer}")
            
            player_stats["total_questions"] += 1
            print(f"ƒêi·ªÉm hi·ªán t·∫°i: {score}")
        
        # K·∫øt qu·∫£ cu·ªëi game
        percentage = (score / (question_count * 10)) * 100
        print(f"\nüèÜ K·∫æT QU·∫¢ QUIZ {topic_name}")
        print(f"ƒêi·ªÉm s·ªë: {score}/{question_count * 10}")
        print(f"T·ª∑ l·ªá ƒë√∫ng: {percentage:.1f}%")
        
        # ƒê√°nh gi√°
        if percentage >= 90:
            print("üåü Xu·∫•t s·∫Øc! B·∫°n l√† thi√™n t√†i!")
        elif percentage >= 70:
            print("üëè Gi·ªèi l·∫Øm! Ki·∫øn th·ª©c t·ªët!")
        elif percentage >= 50:
            print("üëç Kh√¥ng t·ªá! C·∫ßn c·ªë g·∫Øng th√™m!")
        else:
            print("üí™ C·∫ßn h·ªçc th√™m nh√©!")
        
        # C·∫≠p nh·∫≠t high score
        if score > player_stats["high_score"]:
            player_stats["high_score"] = score
            print("üéâ HIGH SCORE M·ªöI!")
        
        player_stats["topics_played"].add(topic_name)
        return score
    
    def view_stats():
        """Xem th·ªëng k√™"""
        print(f"\nüìä TH·ªêNG K√ä GAME - {player_stats['name']}")
        print("-" * 30)
        print(f"T·ªïng c√¢u h·ªèi: {player_stats['total_questions']}")
        print(f"C√¢u tr·∫£ l·ªùi ƒë√∫ng: {player_stats['correct_answers']}")
        
        if player_stats['total_questions'] > 0:
            accuracy = (player_stats['correct_answers'] / player_stats['total_questions']) * 100
            print(f"ƒê·ªô ch√≠nh x√°c: {accuracy:.1f}%")
        
        print(f"High Score: {player_stats['high_score']}")
        print(f"Ch·ªß ƒë·ªÅ ƒë√£ ch∆°i: {', '.join(player_stats['topics_played'])}")
    
    # Main quiz menu
    get_player_info()
    
    while True:
        print(f"\nüéÆ QUIZ GAME MENU - {player_stats['name']}")
        print("1. Ch∆°i Quiz")
        print("2. Xem th·ªëng k√™")
        print("3. Lu·∫≠t ch∆°i")
        print("4. Tho√°t")
        
        choice = input("Ch·ªçn (1-4): ")
        
        if choice == '1':
            topic = choose_topic()
            play_quiz(topic)
        elif choice == '2':
            view_stats()
        elif choice == '3':
            print("\nüìã LU·∫¨T CH∆†I:")
            print("- Ch·ªçn ch·ªß ƒë·ªÅ y√™u th√≠ch")
            print("- Tr·∫£ l·ªùi c√¢u h·ªèi b·∫±ng c√°ch ch·ªçn 1-4")
            print("- M·ªói c√¢u ƒë√∫ng = 10 ƒëi·ªÉm")
            print("- C·ªë g·∫Øng ƒë·∫°t high score!")
        elif choice == '4':
            print(f"üëã T·∫°m bi·ªát {player_stats['name']}! C·∫£m ∆°n b·∫°n ƒë√£ ch∆°i!")
            break
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")

# =============================================================================
# ·ª®NG D·ª§NG 3: QU·∫¢N L√ù H·ªåC SINH
# =============================================================================

def student_management():
    """H·ªá th·ªëng qu·∫£n l√Ω h·ªçc sinh"""
    print("\nüéì ·ª®NG D·ª§NG 3: QU·∫¢N L√ù H·ªåC SINH")
    print("=" * 40)
    
    students = []  # Database h·ªçc sinh
    
    def add_student():
        """Th√™m h·ªçc sinh m·ªõi"""
        print("\n‚ûï TH√äM H·ªåC SINH M·ªöI")
        
        # Nh·∫≠p th√¥ng tin
        while True:
            name = input("H·ªç t√™n: ").strip()
            if name:
                break
            print("‚ùå T√™n kh√¥ng ƒë∆∞·ª£c r·ªóng!")
        
        while True:
            try:
                age = int(input("Tu·ªïi: "))
                if 6 <= age <= 25:
                    break
                print("‚ùå Tu·ªïi ph·∫£i t·ª´ 6-25!")
            except ValueError:
                print("‚ùå Vui l√≤ng nh·∫≠p s·ªë!")
        
        # Nh·∫≠p ƒëi·ªÉm c√°c m√¥n
        subjects = ["To√°n", "L√Ω", "H√≥a", "VƒÉn", "Anh"]
        scores = {}
        
        print("Nh·∫≠p ƒëi·ªÉm c√°c m√¥n (0-10):")
        for subject in subjects:
            while True:
                try:
                    score = float(input(f"{subject}: "))
                    if 0 <= score <= 10:
                        scores[subject] = score
                        break
                    print("‚ùå ƒêi·ªÉm ph·∫£i t·ª´ 0-10!")
                except ValueError:
                    print("‚ùå Vui l√≤ng nh·∫≠p s·ªë!")
        
        # T√≠nh ƒëi·ªÉm trung b√¨nh
        average = sum(scores.values()) / len(scores)
        
        # X·∫øp lo·∫°i
        if average >= 9:
            rank = "Xu·∫•t s·∫Øc"
        elif average >= 8:
            rank = "Gi·ªèi"
        elif average >= 6.5:
            rank = "Kh√°"
        elif average >= 5:
            rank = "Trung b√¨nh"
        else:
            rank = "Y·∫øu"
        
        # T·∫°o student ID
        student_id = f"SV{len(students) + 1:03d}"
        
        # Th√™m v√†o database
        student = {
            "id": student_id,
            "name": name,
            "age": age,
            "scores": scores,
            "average": average,
            "rank": rank
        }
        
        students.append(student)
        print(f"‚úÖ ƒê√£ th√™m h·ªçc sinh {name} v·ªõi ID: {student_id}")
        print(f"ƒêi·ªÉm TB: {average:.2f} - X·∫øp lo·∫°i: {rank}")
    
    def view_students():
        """Xem danh s√°ch h·ªçc sinh"""
        if not students:
            print("üìù Danh s√°ch tr·ªëng!")
            return
        
        print(f"\nüìã DANH S√ÅCH H·ªåC SINH ({len(students)} ng∆∞·ªùi)")
        print("-" * 70)
        print(f"{'ID':<6} {'H·ªç t√™n':<20} {'Tu·ªïi':<5} {'ƒêTB':<6} {'X·∫øp lo·∫°i':<15}")
        print("-" * 70)
        
        for student in students:
            print(f"{student['id']:<6} {student['name']:<20} {student['age']:<5} "
                  f"{student['average']:<6.2f} {student['rank']:<15}")
    
    def search_student():
        """T√¨m ki·∫øm h·ªçc sinh"""
        if not students:
            print("üìù Danh s√°ch tr·ªëng!")
            return
        
        print("\nüîç T√åM KI·∫æM H·ªåC SINH")
        print("1. T√¨m theo ID")
        print("2. T√¨m theo t√™n")
        print("3. T√¨m theo x·∫øp lo·∫°i")
        
        choice = input("Ch·ªçn (1-3): ")
        found_students = []
        
        if choice == '1':
            search_id = input("Nh·∫≠p ID: ").upper()
            found_students = [s for s in students if s['id'] == search_id]
        elif choice == '2':
            search_name = input("Nh·∫≠p t√™n (c√≥ th·ªÉ l√† m·ªôt ph·∫ßn): ").lower()
            found_students = [s for s in students if search_name in s['name'].lower()]
        elif choice == '3':
            print("X·∫øp lo·∫°i: Xu·∫•t s·∫Øc, Gi·ªèi, Kh√°, Trung b√¨nh, Y·∫øu")
            search_rank = input("Nh·∫≠p x·∫øp lo·∫°i: ")
            found_students = [s for s in students if s['rank'].lower() == search_rank.lower()]
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
            return
        
        if found_students:
            print(f"\nüéØ T√åM TH·∫§Y {len(found_students)} K·∫æT QU·∫¢:")
            for student in found_students:
                print(f"\nID: {student['id']} - {student['name']} ({student['age']} tu·ªïi)")
                print(f"ƒêi·ªÉm c√°c m√¥n: {student['scores']}")
                print(f"ƒêTB: {student['average']:.2f} - X·∫øp lo·∫°i: {student['rank']}")
        else:
            print("‚ùå Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£!")
    
    def statistics():
        """Th·ªëng k√™"""
        if not students:
            print("üìù Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ th·ªëng k√™!")
            return
        
        print("\nüìä TH·ªêNG K√ä H·ªåC SINH")
        print("-" * 30)
        
        # Th·ªëng k√™ theo x·∫øp lo·∫°i
        ranks = {}
        total_average = 0
        ages = []
        
        for student in students:
            rank = student['rank']
            ranks[rank] = ranks.get(rank, 0) + 1
            total_average += student['average']
            ages.append(student['age'])
        
        print("Th·ªëng k√™ theo x·∫øp lo·∫°i:")
        for rank, count in ranks.items():
            percentage = (count / len(students)) * 100
            print(f"- {rank}: {count} ng∆∞·ªùi ({percentage:.1f}%)")
        
        print(f"\nƒêi·ªÉm trung b√¨nh chung: {total_average / len(students):.2f}")
        print(f"Tu·ªïi trung b√¨nh: {sum(ages) / len(ages):.1f}")
        print(f"Tu·ªïi nh·ªè nh·∫•t: {min(ages)}")
        print(f"Tu·ªïi l·ªõn nh·∫•t: {max(ages)}")
        
        # Top h·ªçc sinh
        top_students = sorted(students, key=lambda x: x['average'], reverse=True)[:3]
        print(f"\nüèÜ TOP 3 H·ªåC SINH:")
        for i, student in enumerate(top_students, 1):
            print(f"{i}. {student['name']} - ƒêTB: {student['average']:.2f}")
    
    def update_student():
        """C·∫≠p nh·∫≠t th√¥ng tin h·ªçc sinh"""
        if not students:
            print("üìù Danh s√°ch tr·ªëng!")
            return
        
        print("\n‚úèÔ∏è C·∫¨P NH·∫¨T H·ªåC SINH")
        view_students()
        
        student_id = input("\nNh·∫≠p ID h·ªçc sinh c·∫ßn c·∫≠p nh·∫≠t: ").upper()
        student = None
        
        for s in students:
            if s['id'] == student_id:
                student = s
                break
        
        if not student:
            print("‚ùå Kh√¥ng t√¨m th·∫•y h·ªçc sinh!")
            return
        
        print(f"\nTh√¥ng tin hi·ªán t·∫°i: {student['name']}")
        print("Ch·ªçn th√¥ng tin c·∫ßn c·∫≠p nh·∫≠t:")
        print("1. T√™n")
        print("2. Tu·ªïi") 
        print("3. ƒêi·ªÉm m√¥n h·ªçc")
        
        choice = input("Ch·ªçn (1-3): ")
        
        if choice == '1':
            new_name = input("T√™n m·ªõi: ").strip()
            if new_name:
                student['name'] = new_name
                print("‚úÖ ƒê√£ c·∫≠p nh·∫≠t t√™n!")
        elif choice == '2':
            try:
                new_age = int(input("Tu·ªïi m·ªõi: "))
                if 6 <= new_age <= 25:
                    student['age'] = new_age
                    print("‚úÖ ƒê√£ c·∫≠p nh·∫≠t tu·ªïi!")
                else:
                    print("‚ùå Tu·ªïi ph·∫£i t·ª´ 6-25!")
            except ValueError:
                print("‚ùå Vui l√≤ng nh·∫≠p s·ªë!")
        elif choice == '3':
            print("ƒêi·ªÉm hi·ªán t·∫°i:", student['scores'])
            subject = input("M√¥n c·∫ßn c·∫≠p nh·∫≠t: ")
            if subject in student['scores']:
                try:
                    new_score = float(input(f"ƒêi·ªÉm {subject} m·ªõi: "))
                    if 0 <= new_score <= 10:
                        student['scores'][subject] = new_score
                        
                        # T√≠nh l·∫°i ƒëi·ªÉm TB v√† x·∫øp lo·∫°i
                        student['average'] = sum(student['scores'].values()) / len(student['scores'])
                        
                        if student['average'] >= 9:
                            student['rank'] = "Xu·∫•t s·∫Øc"
                        elif student['average'] >= 8:
                            student['rank'] = "Gi·ªèi"
                        elif student['average'] >= 6.5:
                            student['rank'] = "Kh√°"
                        elif student['average'] >= 5:
                            student['rank'] = "Trung b√¨nh"
                        else:
                            student['rank'] = "Y·∫øu"
                        
                        print("‚úÖ ƒê√£ c·∫≠p nh·∫≠t ƒëi·ªÉm v√† x·∫øp lo·∫°i!")
                    else:
                        print("‚ùå ƒêi·ªÉm ph·∫£i t·ª´ 0-10!")
                except ValueError:
                    print("‚ùå Vui l√≤ng nh·∫≠p s·ªë!")
            else:
                print("‚ùå M√¥n h·ªçc kh√¥ng t·ªìn t·∫°i!")
    
    def delete_student():
        """X√≥a h·ªçc sinh"""
        if not students:
            print("üìù Danh s√°ch tr·ªëng!")
            return
        
        print("\nüóëÔ∏è X√ìA H·ªåC SINH")
        view_students()
        
        student_id = input("\nNh·∫≠p ID h·ªçc sinh c·∫ßn x√≥a: ").upper()
        
        for i, student in enumerate(students):
            if student['id'] == student_id:
                confirm = input(f"X√°c nh·∫≠n x√≥a {student['name']}? (yes/no): ").lower()
                if confirm in ['yes', 'y', 'c√≥']:
                    removed = students.pop(i)
                    print(f"‚úÖ ƒê√£ x√≥a h·ªçc sinh {removed['name']}")
                else:
                    print("‚ùå ƒê√£ h·ªßy x√≥a!")
                return
        
        print("‚ùå Kh√¥ng t√¨m th·∫•y h·ªçc sinh!")
    
    # Main menu
    while True:
        print(f"\nüéì QU·∫¢N L√ù H·ªåC SINH - T·ªïng: {len(students)} ng∆∞·ªùi")
        print("1. Th√™m h·ªçc sinh")
        print("2. Xem danh s√°ch")
        print("3. T√¨m ki·∫øm")
        print("4. Th·ªëng k√™")
        print("5. C·∫≠p nh·∫≠t")
        print("6. X√≥a")
        print("7. Tho√°t")
        
        choice = input("Ch·ªçn (1-7): ")
        
        if choice == '1':
            add_student()
        elif choice == '2':
            view_students()
        elif choice == '3':
            search_student()
        elif choice == '4':
            statistics()
        elif choice == '5':
            update_student()
        elif choice == '6':
            delete_student()
        elif choice == '7':
            print("üëã T·∫°m bi·ªát! C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng h·ªá th·ªëng!")
            break
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")

# =============================================================================
# ·ª®NG D·ª§NG 4: WEATHER TRACKER
# =============================================================================

def weather_tracker():
    """·ª®ng d·ª•ng theo d√µi th·ªùi ti·∫øt"""
    print("\nüå§Ô∏è ·ª®NG D·ª§NG 4: WEATHER TRACKER")
    print("=" * 40)
    
    weather_data = []
    
    def add_weather_data():
        """Th√™m d·ªØ li·ªáu th·ªùi ti·∫øt"""
        print("\nüìä TH√äM D·ªÆ LI·ªÜU TH·ªúI TI·∫æT")
        
        # Nh·∫≠p ng√†y
        while True:
            date = input("Ng√†y (dd/mm/yyyy): ")
            if len(date) == 10 and date[2] == '/' and date[5] == '/':
                break
            print("‚ùå Format ng√†y: dd/mm/yyyy")
        
        # Nhi·ªát ƒë·ªô
        while True:
            try:
                temp = float(input("Nhi·ªát ƒë·ªô (¬∞C): "))
                if -50 <= temp <= 60:
                    break
                print("‚ùå Nhi·ªát ƒë·ªô ph·∫£i t·ª´ -50¬∞C ƒë·∫øn 60¬∞C")
            except ValueError:
                print("‚ùå Vui l√≤ng nh·∫≠p s·ªë!")
        
        # ƒê·ªô ·∫©m
        while True:
            try:
                humidity = int(input("ƒê·ªô ·∫©m (%): "))
                if 0 <= humidity <= 100:
                    break
                print("‚ùå ƒê·ªô ·∫©m ph·∫£i t·ª´ 0-100%")
            except ValueError:
                print("‚ùå Vui l√≤ng nh·∫≠p s·ªë!")
        
        # Th·ªùi ti·∫øt
        weather_conditions = ["N·∫Øng", "M√¢y", "M∆∞a", "B√£o", "S∆∞∆°ng m√π"]
        print("T√¨nh tr·∫°ng th·ªùi ti·∫øt:")
        for i, condition in enumerate(weather_conditions, 1):
            print(f"{i}. {condition}")
        
        while True:
            try:
                choice = int(input("Ch·ªçn (1-5): ")) - 1
                if 0 <= choice < len(weather_conditions):
                    condition = weather_conditions[choice]
                    break
                print("‚ùå Ch·ªçn t·ª´ 1-5!")
            except ValueError:
                print("‚ùå Vui l√≤ng nh·∫≠p s·ªë!")
        
        # Ghi ch√∫
        notes = input("Ghi ch√∫ (t√πy ch·ªçn): ")
        
        # Th√™m v√†o database
        weather_entry = {
            "date": date,
            "temperature": temp,
            "humidity": humidity,
            "condition": condition,
            "notes": notes
        }
        
        weather_data.append(weather_entry)
        print(f"‚úÖ ƒê√£ th√™m d·ªØ li·ªáu th·ªùi ti·∫øt ng√†y {date}")
    
    def view_weather_data():
        """Xem d·ªØ li·ªáu th·ªùi ti·∫øt"""
        if not weather_data:
            print("üìù Ch∆∞a c√≥ d·ªØ li·ªáu th·ªùi ti·∫øt!")
            return
        
        print(f"\nüå°Ô∏è D·ªÆ LI·ªÜU TH·ªúI TI·∫æT ({len(weather_data)} ng√†y)")
        print("-" * 80)
        print(f"{'Ng√†y':<12} {'Nhi·ªát ƒë·ªô':<10} {'ƒê·ªô ·∫©m':<8} {'Th·ªùi ti·∫øt':<12} {'Ghi ch√∫':<20}")
        print("-" * 80)
        
        for entry in weather_data:
            notes_short = entry['notes'][:17] + "..." if len(entry['notes']) > 20 else entry['notes']
            print(f"{entry['date']:<12} {entry['temperature']:>6.1f}¬∞C  {entry['humidity']:>5}%   "
                  f"{entry['condition']:<12} {notes_short:<20}")
    
    def weather_statistics():
        """Th·ªëng k√™ th·ªùi ti·∫øt"""
        if not weather_data:
            print("üìù Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ th·ªëng k√™!")
            return
        
        print("\nüìà TH·ªêNG K√ä TH·ªúI TI·∫æT")
        print("-" * 30)
        
        # Th·ªëng k√™ nhi·ªát ƒë·ªô
        temperatures = [entry['temperature'] for entry in weather_data]
        avg_temp = sum(temperatures) / len(temperatures)
        max_temp = max(temperatures)
        min_temp = min(temperatures)
        
        print(f"Nhi·ªát ƒë·ªô trung b√¨nh: {avg_temp:.1f}¬∞C")
        print(f"Nhi·ªát ƒë·ªô cao nh·∫•t: {max_temp:.1f}¬∞C")
        print(f"Nhi·ªát ƒë·ªô th·∫•p nh·∫•t: {min_temp:.1f}¬∞C")
        
        # Th·ªëng k√™ ƒë·ªô ·∫©m
        humidities = [entry['humidity'] for entry in weather_data]
        avg_humidity = sum(humidities) / len(humidities)
        
        print(f"ƒê·ªô ·∫©m trung b√¨nh: {avg_humidity:.1f}%")
        
        # Th·ªëng k√™ th·ªùi ti·∫øt
        conditions = {}
        for entry in weather_data:
            condition = entry['condition']
            conditions[condition] = conditions.get(condition, 0) + 1
        
        print("\nTh·ªëng k√™ th·ªùi ti·∫øt:")
        for condition, count in conditions.items():
            percentage = (count / len(weather_data)) * 100
            print(f"- {condition}: {count} ng√†y ({percentage:.1f}%)")
        
        # Ng√†y ƒë·∫∑c bi·ªát
        hot_days = [e for e in weather_data if e['temperature'] > 35]
        cold_days = [e for e in weather_data if e['temperature'] < 15]
        rainy_days = [e for e in weather_data if e['condition'] == 'M∆∞a']
        
        print(f"\nNg√†y n√≥ng (>35¬∞C): {len(hot_days)}")
        print(f"Ng√†y l·∫°nh (<15¬∞C): {len(cold_days)}")
        print(f"Ng√†y m∆∞a: {len(rainy_days)}")
    
    def search_weather():
        """T√¨m ki·∫øm d·ªØ li·ªáu th·ªùi ti·∫øt"""
        if not weather_data:
            print("üìù Ch∆∞a c√≥ d·ªØ li·ªáu!")
            return
        
        print("\nüîç T√åM KI·∫æM TH·ªúI TI·∫æT")
        print("1. T√¨m theo ng√†y")
        print("2. T√¨m theo nhi·ªát ƒë·ªô")
        print("3. T√¨m theo th·ªùi ti·∫øt")
        
        choice = input("Ch·ªçn (1-3): ")
        found_entries = []
        
        if choice == '1':
            search_date = input("Nh·∫≠p ng√†y (dd/mm/yyyy): ")
            found_entries = [e for e in weather_data if e['date'] == search_date]
        elif choice == '2':
            try:
                min_temp = float(input("Nhi·ªát ƒë·ªô t·ª´: "))
                max_temp = float(input("Nhi·ªát ƒë·ªô ƒë·∫øn: "))
                found_entries = [e for e in weather_data 
                               if min_temp <= e['temperature'] <= max_temp]
            except ValueError:
                print("‚ùå Vui l√≤ng nh·∫≠p s·ªë!")
                return
        elif choice == '3':
            search_condition = input("Th·ªùi ti·∫øt (N·∫Øng/M√¢y/M∆∞a/B√£o/S∆∞∆°ng m√π): ")
            found_entries = [e for e in weather_data 
                           if e['condition'].lower() == search_condition.lower()]
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
            return
        
        if found_entries:
            print(f"\nüéØ T√åM TH·∫§Y {len(found_entries)} K·∫æT QU·∫¢:")
            for entry in found_entries:
                print(f"\nüìÖ {entry['date']}")
                print(f"üå°Ô∏è Nhi·ªát ƒë·ªô: {entry['temperature']:.1f}¬∞C")
                print(f"üíß ƒê·ªô ·∫©m: {entry['humidity']}%")
                print(f"üå§Ô∏è Th·ªùi ti·∫øt: {entry['condition']}")
                if entry['notes']:
                    print(f"üìù Ghi ch√∫: {entry['notes']}")
        else:
            print("‚ùå Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£!")
    
    def weather_trends():
        """Ph√¢n t√≠ch xu h∆∞·ªõng th·ªùi ti·∫øt"""
        if len(weather_data) < 2:
            print("üìù C·∫ßn √≠t nh·∫•t 2 ng√†y d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch xu h∆∞·ªõng!")
            return
        
        print("\nüìä XU H∆Ø·ªöNG TH·ªúI TI·∫æT")
        print("-" * 30)
        
        # Xu h∆∞·ªõng nhi·ªát ƒë·ªô
        recent_temps = [e['temperature'] for e in weather_data[-7:]]  # 7 ng√†y g·∫ßn nh·∫•t
        if len(recent_temps) >= 2:
            temp_trend = recent_temps[-1] - recent_temps[0]
            if temp_trend > 1:
                print("üî• Xu h∆∞·ªõng: Nhi·ªát ƒë·ªô ƒëang tƒÉng")
            elif temp_trend < -1:
                print("‚ùÑÔ∏è Xu h∆∞·ªõng: Nhi·ªát ƒë·ªô ƒëang gi·∫£m")
            else:
                print("‚û°Ô∏è Xu h∆∞·ªõng: Nhi·ªát ƒë·ªô ·ªïn ƒë·ªãnh")
        
        # D·ª± ƒëo√°n ƒë∆°n gi·∫£n
        avg_recent_temp = sum(recent_temps) / len(recent_temps)
        print(f"Nhi·ªát ƒë·ªô d·ª± ki·∫øn ng√†y mai: {avg_recent_temp:.1f}¬∞C")
        
        # Th·ªùi ti·∫øt ph·ªï bi·∫øn g·∫ßn ƒë√¢y
        recent_conditions = [e['condition'] for e in weather_data[-5:]]
        most_common = max(set(recent_conditions), key=recent_conditions.count)
        print(f"Th·ªùi ti·∫øt ph·ªï bi·∫øn g·∫ßn ƒë√¢y: {most_common}")
    
    # Main menu
    while True:
        print(f"\nüå§Ô∏è WEATHER TRACKER - {len(weather_data)} ng√†y d·ªØ li·ªáu")
        print("1. Th√™m d·ªØ li·ªáu")
        print("2. Xem d·ªØ li·ªáu")
        print("3. Th·ªëng k√™")
        print("4. T√¨m ki·∫øm")
        print("5. Xu h∆∞·ªõng")
        print("6. Tho√°t")
        
        choice = input("Ch·ªçn (1-6): ")
        
        if choice == '1':
            add_weather_data()
        elif choice == '2':
            view_weather_data()
        elif choice == '3':
            weather_statistics()
        elif choice == '4':
            search_weather()
        elif choice == '5':
            weather_trends()
        elif choice == '6':
            print("üëã T·∫°m bi·ªát! C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng Weather Tracker!")
            break
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")

# =============================================================================
# ·ª®NG D·ª§NG 5: SHOPPING CART SYSTEM
# =============================================================================

def shopping_cart():
    """H·ªá th·ªëng gi·ªè h√†ng mua s·∫Øm"""
    print("\nüõí ·ª®NG D·ª§NG 5: SHOPPING CART SYSTEM")
    print("=" * 40)
    
    # Database s·∫£n ph·∫©m
    products = {
        "SP001": {"name": "iPhone 15", "price": 25000000, "stock": 10, "category": "ƒêi·ªán tho·∫°i"},
        "SP002": {"name": "Samsung Galaxy S24", "price": 22000000, "stock": 8, "category": "ƒêi·ªán tho·∫°i"},
        "SP003": {"name": "MacBook Pro", "price": 45000000, "stock": 5, "category": "Laptop"},
        "SP004": {"name": "Dell XPS 13", "price": 30000000, "stock": 7, "category": "Laptop"},
        "SP005": {"name": "iPad Air", "price": 18000000, "stock": 12, "category": "Tablet"},
        "SP006": {"name": "AirPods Pro", "price": 6000000, "stock": 20, "category": "Ph·ª• ki·ªán"},
        "SP007": {"name": "Apple Watch", "price": 12000000, "stock": 15, "category": "Ph·ª• ki·ªán"},
        "SP008": {"name": "Gaming Mouse", "price": 2000000, "stock": 25, "category": "Ph·ª• ki·ªán"},
    }
    
    cart = []  # Gi·ªè h√†ng
    customer_info = {}
    
    def display_products():
        """Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m"""
        print("\nüè™ DANH S√ÅCH S·∫¢N PH·∫®M")
        print("-" * 80)
        print(f"{'M√£ SP':<8} {'T√™n s·∫£n ph·∫©m':<20} {'Gi√°':<15} {'Kho':<6} {'Danh m·ª•c':<12}")
        print("-" * 80)
        
        for code, info in products.items():
            price_str = f"{info['price']:,}ƒë"
            stock_status = f"{info['stock']}" if info['stock'] > 0 else "H·∫øt h√†ng"
            print(f"{code:<8} {info['name']:<20} {price_str:<15} {stock_status:<6} {info['category']:<12}")
    
    def add_to_cart():
        """Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng"""
        display_products()
        
        while True:
            product_code = input("\nNh·∫≠p m√£ s·∫£n ph·∫©m (ho·∫∑c 'back' ƒë·ªÉ quay l·∫°i): ").upper()
            
            if product_code == 'BACK':
                return
            
            if product_code not in products:
                print("‚ùå M√£ s·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i!")
                continue
            
            product = products[product_code]
            
            if product['stock'] == 0:
                print("‚ùå S·∫£n ph·∫©m ƒë√£ h·∫øt h√†ng!")
                continue
            
            while True:
                try:
                    quantity = int(input(f"S·ªë l∆∞·ª£ng (c√≥ s·∫µn: {product['stock']}): "))
                    
                    if quantity <= 0:
                        print("‚ùå S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0!")
                        continue
                    elif quantity > product['stock']:
                        print(f"‚ùå Ch·ªâ c√≤n {product['stock']} s·∫£n ph·∫©m!")
                        continue
                    else:
                        # Ki·ªÉm tra s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè ch∆∞a
                        existing_item = None
                        for item in cart:
                            if item['code'] == product_code:
                                existing_item = item
                                break
                        
                        if existing_item:
                            new_quantity = existing_item['quantity'] + quantity
                            if new_quantity <= product['stock']:
                                existing_item['quantity'] = new_quantity
                                existing_item['total'] = new_quantity * product['price']
                                print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng {product['name']} th√†nh {new_quantity}")
                            else:
                                print(f"‚ùå T·ªïng s·ªë l∆∞·ª£ng v∆∞·ª£t qu√° kho ({product['stock']})!")
                                continue
                        else:
                            cart_item = {
                                'code': product_code,
                                'name': product['name'],
                                'price': product['price'],
                                'quantity': quantity,
                                'total': quantity * product['price']
                            }
                            cart.append(cart_item)
                            print(f"‚úÖ ƒê√£ th√™m {quantity} {product['name']} v√†o gi·ªè h√†ng")
                        
                        break
                except ValueError:
                    print("‚ùå Vui l√≤ng nh·∫≠p s·ªë!")
            
            add_more = input("Th√™m s·∫£n ph·∫©m kh√°c? (y/n): ").lower()
            if add_more not in ['y', 'yes', 'c√≥']:
                break
    
    def view_cart():
        """Xem gi·ªè h√†ng"""
        if not cart:
            print("üõí Gi·ªè h√†ng tr·ªëng!")
            return
        
        print(f"\nüõí GI·ªé H√ÄNG ({len(cart)} lo·∫°i s·∫£n ph·∫©m)")
        print("-" * 70)
        print(f"{'STT':<4} {'T√™n s·∫£n ph·∫©m':<20} {'Gi√°':<12} {'SL':<4} {'Th√†nh ti·ªÅn':<15}")
        print("-" * 70)
        
        total_amount = 0
        for i, item in enumerate(cart, 1):
            price_str = f"{item['price']:,}ƒë"
            total_str = f"{item['total']:,}ƒë"
            print(f"{i:<4} {item['name']:<20} {price_str:<12} {item['quantity']:<4} {total_str:<15}")
            total_amount += item['total']
        
        print("-" * 70)
        print(f"{'T·ªîNG TI·ªÄN:':<41} {total_amount:,}ƒë")
        
        return total_amount
    
    def update_cart():
        """C·∫≠p nh·∫≠t gi·ªè h√†ng"""
        if not cart:
            print("üõí Gi·ªè h√†ng tr·ªëng!")
            return
        
        view_cart()
        
        try:
            item_index = int(input("\nCh·ªçn s·∫£n ph·∫©m c·∫ßn c·∫≠p nh·∫≠t (STT): ")) - 1
            
            if 0 <= item_index < len(cart):
                item = cart[item_index]
                product = products[item['code']]
                
                print(f"\nC·∫≠p nh·∫≠t: {item['name']}")
                print("1. Thay ƒë·ªïi s·ªë l∆∞·ª£ng")
                print("2. X√≥a kh·ªèi gi·ªè h√†ng")
                
                choice = input("Ch·ªçn (1-2): ")
                
                if choice == '1':
                    new_quantity = int(input(f"S·ªë l∆∞·ª£ng m·ªõi (hi·ªán t·∫°i: {item['quantity']}, kho: {product['stock']}): "))
                    
                    if new_quantity <= 0:
                        cart.pop(item_index)
                        print("‚úÖ ƒê√£ x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng")
                    elif new_quantity <= product['stock']:
                        item['quantity'] = new_quantity
                        item['total'] = new_quantity * item['price']
                        print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng th√†nh {new_quantity}")
                    else:
                        print(f"‚ùå V∆∞·ª£t qu√° s·ªë l∆∞·ª£ng kho ({product['stock']})!")
                elif choice == '2':
                    removed_item = cart.pop(item_index)
                    print(f"‚úÖ ƒê√£ x√≥a {removed_item['name']} kh·ªèi gi·ªè h√†ng")
            else:
                print("‚ùå STT kh√¥ng h·ª£p l·ªá!")
        except ValueError:
            print("‚ùå Vui l√≤ng nh·∫≠p s·ªë!")
    
    def apply_discount(total):
        """√Åp d·ª•ng gi·∫£m gi√°"""
        print(f"\nüí∞ T·ªîNG TI·ªÄN: {total:,}ƒë")
        print("\nüé´ √ÅP D·ª§NG GI·∫¢M GI√Å:")
        print("1. Kh√°ch h√†ng th√¢n thi·∫øt (-10%)")
        print("2. Sinh vi√™n (-15%)")
        print("3. Mua tr√™n 50 tri·ªáu (-20%)")
        print("4. Kh√¥ng √°p d·ª•ng")
        
        choice = input("Ch·ªçn lo·∫°i gi·∫£m gi√° (1-4): ")
        discount = 0
        discount_name = ""
        
        if choice == '1':
            discount = 0.10
            discount_name = "Kh√°ch h√†ng th√¢n thi·∫øt"
        elif choice == '2':
            discount = 0.15
            discount_name = "Sinh vi√™n"
        elif choice == '3':
            if total >= 50000000:
                discount = 0.20
                discount_name = "Mua tr√™n 50 tri·ªáu"
            else:
                print("‚ùå Kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán gi·∫£m gi√° n√†y!")
                return total, 0, ""
        elif choice == '4':
            return total, 0, ""
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
            return total, 0, ""
        
        discount_amount = total * discount
        final_total = total - discount_amount
        
        print(f"üé´ Gi·∫£m gi√° {discount_name}: -{discount_amount:,}ƒë ({discount*100:.0f}%)")
        print(f"üí≥ Th√†nh ti·ªÅn: {final_total:,}ƒë")
        
        return final_total, discount_amount, discount_name
    
    def checkout():
        """Thanh to√°n"""
        if not cart:
            print("üõí Gi·ªè h√†ng tr·ªëng! Kh√¥ng th·ªÉ thanh to√°n.")
            return
        
        print("\nüí≥ THANH TO√ÅN")
        total = view_cart()
        
        # √Åp d·ª•ng gi·∫£m gi√°
        final_total, discount_amount, discount_name = apply_discount(total)
        
        # Nh·∫≠p th√¥ng tin kh√°ch h√†ng
        print("\nüë§ TH√îNG TIN KH√ÅCH H√ÄNG:")
        customer_info['name'] = input("H·ªç t√™n: ")
        customer_info['phone'] = input("S·ªë ƒëi·ªán tho·∫°i: ")
        customer_info['address'] = input("ƒê·ªãa ch·ªâ: ")
        
        # Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n
        print("\nüí≥ PH∆Ø∆†NG TH·ª®C THANH TO√ÅN:")
        print("1. Ti·ªÅn m·∫∑t")
        print("2. Th·∫ª t√≠n d·ª•ng")
        print("3. Chuy·ªÉn kho·∫£n")
        
        payment_methods = ["Ti·ªÅn m·∫∑t", "Th·∫ª t√≠n d·ª•ng", "Chuy·ªÉn kho·∫£n"]
        while True:
            try:
                payment_choice = int(input("Ch·ªçn (1-3): ")) - 1
                if 0 <= payment_choice < 3:
                    payment_method = payment_methods[payment_choice]
                    break
                print("‚ùå Ch·ªçn t·ª´ 1-3!")
            except ValueError:
                print("‚ùå Vui l√≤ng nh·∫≠p s·ªë!")
        
        # X√°c nh·∫≠n thanh to√°n
        print(f"\nüìã X√ÅC NH·∫¨N ƒê·ªäA ƒê∆†N H√ÄNG")
        print("-" * 40)
        print(f"Kh√°ch h√†ng: {customer_info['name']}")
        print(f"ƒêi·ªán tho·∫°i: {customer_info['phone']}")
        print(f"ƒê·ªãa ch·ªâ: {customer_info['address']}")
        print(f"T·ªïng ti·ªÅn h√†ng: {total:,}ƒë")
        if discount_amount > 0:
            print(f"Gi·∫£m gi√°: -{discount_amount:,}ƒë ({discount_name})")
        print(f"Th√†nh ti·ªÅn: {final_total:,}ƒë")
        print(f"Thanh to√°n: {payment_method}")
        
        confirm = input("\nX√°c nh·∫≠n ƒë·∫∑t h√†ng? (yes/no): ").lower()
        
        if confirm in ['yes', 'y', 'c√≥']:
            # C·∫≠p nh·∫≠t kho
            for item in cart:
                products[item['code']]['stock'] -= item['quantity']
            
            # T·∫°o m√£ ƒë∆°n h√†ng
            order_id = f"DH{random.randint(10000, 99999)}"
            
            print(f"\n‚úÖ ƒê·∫∂T H√ÄNG TH√ÄNH C√îNG!")
            print(f"üÜî M√£ ƒë∆°n h√†ng: {order_id}")
            print(f"üí∞ T·ªïng ti·ªÅn: {final_total:,}ƒë")
            print(f"üöö ƒê∆°n h√†ng s·∫Ω ƒë∆∞·ª£c giao trong 2-3 ng√†y!")
            
            # X√≥a gi·ªè h√†ng
            cart.clear()
        else:
            print("‚ùå ƒê√£ h·ªßy ƒë∆°n h√†ng!")
    
    def search_products():
        """T√¨m ki·∫øm s·∫£n ph·∫©m"""
        print("\nüîç T√åM KI·∫æM S·∫¢N PH·∫®M")
        print("1. T√¨m theo t√™n")
        print("2. T√¨m theo danh m·ª•c")
        print("3. T√¨m theo kho·∫£ng gi√°")
        
        choice = input("Ch·ªçn (1-3): ")
        found_products = {}
        
        if choice == '1':
            search_name = input("Nh·∫≠p t√™n s·∫£n ph·∫©m: ").lower()
            found_products = {code: info for code, info in products.items() 
                            if search_name in info['name'].lower()}
        elif choice == '2':
            search_category = input("Nh·∫≠p danh m·ª•c: ").lower()
            found_products = {code: info for code, info in products.items() 
                            if search_category in info['category'].lower()}
        elif choice == '3':
            try:
                min_price = int(input("Gi√° t·ª´: "))
                max_price = int(input("Gi√° ƒë·∫øn: "))
                found_products = {code: info for code, info in products.items() 
                                if min_price <= info['price'] <= max_price}
            except ValueError:
                print("‚ùå Vui l√≤ng nh·∫≠p s·ªë!")
                return
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
            return
        
        if found_products:
            print(f"\nüéØ T√åM TH·∫§Y {len(found_products)} S·∫¢N PH·∫®M:")
            print("-" * 80)
            print(f"{'M√£ SP':<8} {'T√™n s·∫£n ph·∫©m':<20} {'Gi√°':<15} {'Kho':<6} {'Danh m·ª•c':<12}")
            print("-" * 80)
            
            for code, info in found_products.items():
                price_str = f"{info['price']:,}ƒë"
                stock_status = f"{info['stock']}" if info['stock'] > 0 else "H·∫øt h√†ng"
                print(f"{code:<8} {info['name']:<20} {price_str:<15} {stock_status:<6} {info['category']:<12}")
        else:
            print("‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o!")
    
    # Main menu
    while True:
        total_items = sum(item['quantity'] for item in cart)
        print(f"\nüõí SHOPPING CART - Gi·ªè h√†ng: {total_items} s·∫£n ph·∫©m")
        print("1. Xem s·∫£n ph·∫©m")
        print("2. T√¨m ki·∫øm s·∫£n ph·∫©m")
        print("3. Th√™m v√†o gi·ªè h√†ng")
        print("4. Xem gi·ªè h√†ng")
        print("5. C·∫≠p nh·∫≠t gi·ªè h√†ng")
        print("6. Thanh to√°n")
        print("7. Tho√°t")
        
        choice = input("Ch·ªçn (1-7): ")
        
        if choice == '1':
            display_products()
        elif choice == '2':
            search_products()
        elif choice == '3':
            add_to_cart()
        elif choice == '4':
            view_cart()
        elif choice == '5':
            update_cart()
        elif choice == '6':
            checkout()
        elif choice == '7':
            if cart:
                save_cart = input("B·∫°n c√≥ mu·ªën l∆∞u gi·ªè h√†ng? (y/n): ").lower()
                if save_cart in ['y', 'yes', 'c√≥']:
                    print("üíæ Gi·ªè h√†ng ƒë√£ ƒë∆∞·ª£c l∆∞u!")
            print("üëã C·∫£m ∆°n b·∫°n ƒë√£ mua s·∫Øm!")
            break
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")

# =============================================================================
# ·ª®NG D·ª§NG 6: PASSWORD GENERATOR
# =============================================================================

def password_generator():
    """Tr√¨nh t·∫°o m·∫≠t kh·∫©u an to√†n"""
    print("\nüîê ·ª®NG D·ª§NG 6: PASSWORD GENERATOR")
    print("=" * 40)
    
    password_history = []
    
    def generate_password():
        """T·∫°o m·∫≠t kh·∫©u theo y√™u c·∫ßu"""
        print("\nüîë T·∫†O M·∫¨T KH·∫®U M·ªöI")
        
        # C·∫•u h√¨nh m·∫≠t kh·∫©u
        while True:
            try:
                length = int(input("ƒê·ªô d√†i m·∫≠t kh·∫©u (8-128): "))
                if 8 <= length <= 128:
                    break
                print("‚ùå ƒê·ªô d√†i ph·∫£i t·ª´ 8-128 k√Ω t·ª±!")
            except ValueError:
                print("‚ùå Vui l√≤ng nh·∫≠p s·ªë!")
        
        # T√πy ch·ªçn k√Ω t·ª±
        print("\nT√πy ch·ªçn k√Ω t·ª± (ch·ªçn √≠t nh·∫•t 1):")
        
        include_upper = input("Bao g·ªìm ch·ªØ HOA (A-Z)? (y/n): ").lower() in ['y', 'yes', 'c√≥']
        include_lower = input("Bao g·ªìm ch·ªØ th∆∞·ªùng (a-z)? (y/n): ").lower() in ['y', 'yes', 'c√≥']
        include_numbers = input("Bao g·ªìm s·ªë (0-9)? (y/n): ").lower() in ['y', 'yes', 'c√≥']
        include_symbols = input("Bao g·ªìm k√Ω t·ª± ƒë·∫∑c bi·ªát (!@#$%^&*)? (y/n): ").lower() in ['y', 'yes', 'c√≥']
        
        if not any([include_upper, include_lower, include_numbers, include_symbols]):
            print("‚ùå Ph·∫£i ch·ªçn √≠t nh·∫•t 1 lo·∫°i k√Ω t·ª±!")
            return
        
        # T·∫°o b·ªô k√Ω t·ª±
        charset = ""
        if include_upper:
            charset += string.ascii_uppercase
        if include_lower:
            charset += string.ascii_lowercase
        if include_numbers:
            charset += string.digits
        if include_symbols:
            charset += "!@#$%^&*()_+-=[]{}|;:,.<>?"
        
        # T·∫°o m·∫≠t kh·∫©u
        password = ''.join(random.choice(charset) for _ in range(length))
        
        # ƒê·∫£m b·∫£o c√≥ √≠t nh·∫•t 1 k√Ω t·ª± t·ª´ m·ªói lo·∫°i ƒë∆∞·ª£c ch·ªçn
        if include_upper and not any(c.isupper() for c in password):
            password = password[:-1] + random.choice(string.ascii_uppercase)
        if include_lower and not any(c.islower() for c in password):
            password = password[:-1] + random.choice(string.ascii_lowercase)
        if include_numbers and not any(c.isdigit() for c in password):
            password = password[:-1] + random.choice(string.digits)
        if include_symbols and not any(c in "!@#$%^&*()_+-=[]{}|;:,.<>?" for c in password):
            password = password[:-1] + random.choice("!@#$%^&*")
        
        # Tr·ªôn l·∫°i m·∫≠t kh·∫©u
        password_list = list(password)
        random.shuffle(password_list)
        password = ''.join(password_list)
        
        print(f"\n‚úÖ M·∫¨T KH·∫®U ƒê√É T·∫†O:")
        print(f"üîë {password}")
        
        # ƒê√°nh gi√° ƒë·ªô m·∫°nh
        strength = check_password_strength(password)
        print(f"üí™ ƒê·ªô m·∫°nh: {strength}")
        
        # L∆∞u v√†o l·ªãch s·ª≠
        password_entry = {
            "password": password,
            "length": length,
            "strength": strength,
            "created": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        password_history.append(password_entry)
        
        # T√πy ch·ªçn l∆∞u
        save_choice = input("\nL∆∞u m·∫≠t kh·∫©u n√†y? (y/n): ").lower()
        if save_choice in ['y', 'yes', 'c√≥']:
            purpose = input("M·ª•c ƒë√≠ch s·ª≠ d·ª•ng (t√πy ch·ªçn): ")
            password_entry["purpose"] = purpose
            print("üíæ ƒê√£ l∆∞u m·∫≠t kh·∫©u!")
        
        return password
    
    def check_password_strength(password):
        """Ki·ªÉm tra ƒë·ªô m·∫°nh m·∫≠t kh·∫©u"""
        score = 0
        feedback = []
        
        # ƒê·ªô d√†i
        if len(password) >= 12:
            score += 2
        elif len(password) >= 8:
            score += 1
        else:
            feedback.append("Qu√° ng·∫Øn")
        
        # K√Ω t·ª± hoa
        if any(c.isupper() for c in password):
            score += 1
        else:
            feedback.append("Thi·∫øu ch·ªØ hoa")
        
        # K√Ω t·ª± th∆∞·ªùng
        if any(c.islower() for c in password):
            score += 1
        else:
            feedback.append("Thi·∫øu ch·ªØ th∆∞·ªùng")
        
        # S·ªë
        if any(c.isdigit() for c in password):
            score += 1
        else:
            feedback.append("Thi·∫øu s·ªë")
        
        # K√Ω t·ª± ƒë·∫∑c bi·ªát
        if any(c in "!@#$%^&*()_+-=[]{}|;:,.<>?" for c in password):
            score += 1
        else:
            feedback.append("Thi·∫øu k√Ω t·ª± ƒë·∫∑c bi·ªát")
        
        # Kh√¥ng c√≥ pattern ƒë∆°n gi·∫£n
        if not any(password[i:i+3].isdigit() for i in range(len(password)-2)):
            score += 1
        
        # ƒê√°nh gi√°
        if score >= 6:
            return "R·∫•t m·∫°nh üí™"
        elif score >= 4:
            return "M·∫°nh üëç"
        elif score >= 3:
            return "Trung b√¨nh ‚ö†Ô∏è"
        else:
            return f"Y·∫øu ‚ùå ({', '.join(feedback)})"
    
    def validate_existing_password():
        """Ki·ªÉm tra m·∫≠t kh·∫©u hi·ªán c√≥"""
        print("\nüîç KI·ªÇM TRA M·∫¨T KH·∫®U HI·ªÜN C√ì")
        
        password = input("Nh·∫≠p m·∫≠t kh·∫©u c·∫ßn ki·ªÉm tra: ")
        
        if not password:
            print("‚ùå Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u!")
            return
        
        print(f"\nüìä PH√ÇN T√çCH M·∫¨T KH·∫®U: {password}")
        print("-" * 40)
        
        # Th√¥ng tin c∆° b·∫£n
        print(f"ƒê·ªô d√†i: {len(password)} k√Ω t·ª±")
        print(f"ƒê·ªô m·∫°nh: {check_password_strength(password)}")
        
        # Chi ti·∫øt
        has_upper = any(c.isupper() for c in password)
        has_lower = any(c.islower() for c in password)
        has_digit = any(c.isdigit() for c in password)
        has_symbol = any(c in "!@#$%^&*()_+-=[]{}|;:,.<>?" for c in password)
        
        print(f"Ch·ªØ hoa: {'‚úÖ' if has_upper else '‚ùå'}")
        print(f"Ch·ªØ th∆∞·ªùng: {'‚úÖ' if has_lower else '‚ùå'}")
        print(f"S·ªë: {'‚úÖ' if has_digit else '‚ùå'}")
        print(f"K√Ω t·ª± ƒë·∫∑c bi·ªát: {'‚úÖ' if has_symbol else '‚ùå'}")
        
        # C·∫£nh b√°o
        warnings = []
        if "123" in password or "abc" in password.lower():
            warnings.append("Ch·ª©a chu·ªói k√Ω t·ª± li√™n ti·∫øp")
        if password.lower() in ["password", "123456", "qwerty"]:
            warnings.append("L√† m·∫≠t kh·∫©u ph·ªï bi·∫øn")
        if len(set(password)) < len(password) * 0.7:
            warnings.append("Nhi·ªÅu k√Ω t·ª± l·∫∑p l·∫°i")
        
        if warnings:
            print("\n‚ö†Ô∏è C·∫¢NH B√ÅO:")
            for warning in warnings:
                print(f"- {warning}")
        
        # G·ª£i √Ω c·∫£i thi·ªán
        suggestions = []
        if len(password) < 12:
            suggestions.append("TƒÉng ƒë·ªô d√†i l√™n √≠t nh·∫•t 12 k√Ω t·ª±")
        if not has_upper:
            suggestions.append("Th√™m ch·ªØ hoa")
        if not has_lower:
            suggestions.append("Th√™m ch·ªØ th∆∞·ªùng")
        if not has_digit:
            suggestions.append("Th√™m s·ªë")
        if not has_symbol:
            suggestions.append("Th√™m k√Ω t·ª± ƒë·∫∑c bi·ªát")
        
        if suggestions:
            print("\nüí° G·ª¢I √ù C·∫¢I THI·ªÜN:")
            for suggestion in suggestions:
                print(f"- {suggestion}")
    
    def view_password_history():
        """Xem l·ªãch s·ª≠ m·∫≠t kh·∫©u"""
        if not password_history:
            print("üìù Ch∆∞a c√≥ m·∫≠t kh·∫©u n√†o ƒë∆∞·ª£c t·∫°o!")
            return
        
        print(f"\nüìö L·ªäCH S·ª¨ M·∫¨T KH·∫®U ({len(password_history)} m·∫≠t kh·∫©u)")
        print("-" * 80)
        
        for i, entry in enumerate(password_history, 1):
            print(f"\n{i}. T·∫°o l√∫c: {entry['created']}")
            print(f"   M·∫≠t kh·∫©u: {entry['password']}")
            print(f"   ƒê·ªô d√†i: {entry['length']} k√Ω t·ª±")
            print(f"   ƒê·ªô m·∫°nh: {entry['strength']}")
            if 'purpose' in entry and entry['purpose']:
                print(f"   M·ª•c ƒë√≠ch: {entry['purpose']}")
    
    def password_tips():
        """M·∫πo v·ªÅ m·∫≠t kh·∫©u an to√†n"""
        print("\nüí° M·∫∏O T·∫†O M·∫¨T KH·∫®U AN TO√ÄN")
        print("-" * 40)
        
        tips = [
            "S·ª≠ d·ª•ng √≠t nh·∫•t 12 k√Ω t·ª±",
            "K·∫øt h·ª£p ch·ªØ hoa, ch·ªØ th∆∞·ªùng, s·ªë v√† k√Ω t·ª± ƒë·∫∑c bi·ªát",
            "Tr√°nh th√¥ng tin c√° nh√¢n (t√™n, ng√†y sinh, s·ªë ƒëi·ªán tho·∫°i)",
            "Kh√¥ng s·ª≠ d·ª•ng t·ª´ trong t·ª´ ƒëi·ªÉn",
            "M·ªói t√†i kho·∫£n n√™n c√≥ m·∫≠t kh·∫©u ri√™ng",
            "Thay ƒë·ªïi m·∫≠t kh·∫©u ƒë·ªãnh k·ª≥ (3-6 th√°ng)",
            "S·ª≠ d·ª•ng tr√¨nh qu·∫£n l√Ω m·∫≠t kh·∫©u",
            "B·∫≠t x√°c th·ª±c 2 y·∫øu t·ªë khi c√≥ th·ªÉ",
            "Kh√¥ng chia s·∫ª m·∫≠t kh·∫©u v·ªõi ai",
            "Ki·ªÉm tra ƒë·ªãnh k·ª≥ xem t√†i kho·∫£n c√≥ b·ªã hack kh√¥ng"
        ]
        
        for i, tip in enumerate(tips, 1):
            print(f"{i:2}. {tip}")
        
        print("\nüö® D·∫§U HI·ªÜU M·∫¨T KH·∫®U Y·∫æU:")
        weak_signs = [
            "Ng·∫Øn h∆°n 8 k√Ω t·ª±",
            "Ch·ªâ ch·ª©a ch·ªØ c√°i ho·∫∑c ch·ªâ ch·ª©a s·ªë",
            "L√† th√¥ng tin c√° nh√¢n",
            "L√† t·ª´ trong t·ª´ ƒëi·ªÉn",
            "C√≥ pattern ƒë∆°n gi·∫£n (123456, abcdef)",
            "ƒê∆∞·ª£c s·ª≠ d·ª•ng cho nhi·ªÅu t√†i kho·∫£n"
        ]
        
        for sign in weak_signs:
            print(f"‚ùå {sign}")
    
    def generate_passphrase():
        """T·∫°o passphrase (c·ª•m t·ª´ m·∫≠t kh·∫©u)"""
        print("\nüìù T·∫†O PASSPHRASE")
        
        word_lists = {
            "animals": ["cat", "dog", "elephant", "tiger", "lion", "bear", "wolf", "fox"],
            "colors": ["red", "blue", "green", "yellow", "purple", "orange", "pink", "black"],
            "objects": ["house", "car", "book", "tree", "mountain", "river", "star", "moon"],
            "actions": ["run", "jump", "fly", "swim", "dance", "sing", "write", "read"]
        }
        
        try:
            num_words = int(input("S·ªë t·ª´ trong passphrase (3-6): "))
            if not 3 <= num_words <= 6:
                print("‚ùå S·ªë t·ª´ ph·∫£i t·ª´ 3-6!")
                return
        except ValueError:
            print("‚ùå Vui l√≤ng nh·∫≠p s·ªë!")
            return
        
        # T·∫°o passphrase
        words = []
        for _ in range(num_words):
            category = random.choice(list(word_lists.keys()))
            word = random.choice(word_lists[category])
            words.append(word.capitalize())
        
        # Th√™m s·ªë v√† k√Ω t·ª± ƒë·∫∑c bi·ªát
        separator = random.choice(["-", "_", ".", "!"])
        number = random.randint(10, 99)
        
        passphrase = separator.join(words) + str(number)
        
        print(f"\n‚úÖ PASSPHRASE ƒê√É T·∫†O:")
        print(f"üîë {passphrase}")
        print(f"üìè ƒê·ªô d√†i: {len(passphrase)} k√Ω t·ª±")
        print(f"üí™ D·ªÖ nh·ªõ v√† an to√†n!")
        
        # L∆∞u v√†o l·ªãch s·ª≠
        password_entry = {
            "password": passphrase,
            "length": len(passphrase),
            "strength": "M·∫°nh (Passphrase)",
            "created": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "type": "passphrase"
        }
        password_history.append(password_entry)
    
    # Main menu
    while True:
        print(f"\nüîê PASSWORD GENERATOR - {len(password_history)} m·∫≠t kh·∫©u ƒë√£ t·∫°o")
        print("1. T·∫°o m·∫≠t kh·∫©u ng·∫´u nhi√™n")
        print("2. T·∫°o passphrase")
        print("3. Ki·ªÉm tra m·∫≠t kh·∫©u hi·ªán c√≥")
        print("4. Xem l·ªãch s·ª≠")
        print("5. M·∫πo b·∫£o m·∫≠t")
        print("6. Tho√°t")
        
        choice = input("Ch·ªçn (1-6): ")
        
        if choice == '1':
            generate_password()
        elif choice == '2':
            generate_passphrase()
        elif choice == '3':
            validate_existing_password()
        elif choice == '4':
            view_password_history()
        elif choice == '5':
            password_tips()
        elif choice == '6':
            print("üîí C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng Password Generator!")
            print("üí° Nh·ªõ l∆∞u m·∫≠t kh·∫©u ·ªü n∆°i an to√†n!")
            break
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")

# =============================================================================
# MENU CH√çNH - CH·ªåN ·ª®NG D·ª§NG
# =============================================================================

def main_menu():
    """Menu ch√≠nh ƒë·ªÉ ch·ªçn ·ª©ng d·ª•ng"""
    while True:
        print("\nüéØ CH·ªåN ·ª®NG D·ª§NG TH·ª∞C T·∫æ")
        print("=" * 40)
        print("1. üè¶ H·ªá th·ªëng ATM")
        print("2. üß† Game Quiz")
        print("3. üéì Qu·∫£n l√Ω h·ªçc sinh")
        print("4. üå§Ô∏è Weather Tracker")
        print("5. üõí Shopping Cart")
        print("6. üîê Password Generator")
        print("7. üö™ Tho√°t")
        
        choice = input("Ch·ªçn ·ª©ng d·ª•ng (1-7): ")
        
        if choice == '1':
            atm_system()
        elif choice == '2':
            quiz_game()
        elif choice == '3':
            student_management()
        elif choice == '4':
            weather_tracker()
        elif choice == '5':
            shopping_cart()
        elif choice == '6':
            password_generator()
        elif choice == '7':
            print("üëã C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng c√°c ·ª©ng d·ª•ng!")
            print("üéâ Ch√∫c m·ª´ng b·∫°n ƒë√£ ho√†n th√†nh B√†i T·∫≠p 4!")
            break
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")

# =============================================================================
# CH·∫†Y CH∆Ø∆†NG TR√åNH
# =============================================================================

if __name__ == "__main__":
    print("üî• CH√ÄO M·ª™NG ƒê·∫æN V·ªöI B√ÄI T·∫¨P 4!")
    print("6 ·ª©ng d·ª•ng th·ª±c t·∫ø ho√†n ch·ªânh v·ªõi v√≤ng l·∫∑p")
    print("M·ªói ·ª©ng d·ª•ng minh h·ªça c√°ch s·ª≠ d·ª•ng for/while loops")
    print("trong c√°c t√¨nh hu·ªëng th·ª±c t·∫ø kh√°c nhau.")
    
    main_menu()
    
    print("\nüèÜ T·ªîNG K·∫æT B√ÄI T·∫¨P 4")
    print("=" * 30)
    print("KI·∫æN TH·ª®C ƒê√É ·ª®NG D·ª§NG:")
    print("‚úÖ While loops v·ªõi menu systems")
    print("‚úÖ For loops v·ªõi data processing")
    print("‚úÖ Input validation v√† error handling")
    print("‚úÖ Nested loops cho algorithms")
    print("‚úÖ Break/continue trong business logic")
    print("‚úÖ Data structures v·ªõi loops")
    print("‚úÖ User interface design")
    print("‚úÖ Real-world problem solving")
    
    print("\nüåü SKILLS PH√ÅT TRI·ªÇN:")
    print("‚ñ° System design thinking")
    print("‚ñ° User experience awareness")  
    print("‚ñ° Data management")
    print("‚ñ° Security mindset")
    print("‚ñ° Code organization")
    print("‚ñ° Testing v√† debugging")
    
    print("\nüéØ B·∫†N ƒê√É S·∫¥N S√ÄNG CHO:")
    print("- X√¢y d·ª±ng ·ª©ng d·ª•ng ho√†n ch·ªânh")
    print("- L√†m vi·ªác v·ªõi d·ªØ li·ªáu ph·ª©c t·∫°p")
    print("- Thi·∫øt k·∫ø user interfaces")
    print("- Gi·∫£i quy·∫øt b√†i to√°n th·ª±c t·∫ø")
    
    print("\nüöÄ TI·∫æP THEO: D·ª∞ √ÅN L·ªöN V√Ä QUIZ T·ªîNG H·ª¢P!") 
"""
=== QUIZ T·ªîNG H·ª¢P NG√ÄY 3-4: BI·∫æN, S·ªê H·ªåC, STRING ===
Quiz t∆∞∆°ng t√°c v·ªõi giao di·ªán m√†u s·∫Øc v√† theo d√µi ƒëi·ªÉm s·ªë real-time

Ch·ªß ƒë·ªÅ: Variables, Arithmetic, String Manipulation, Type Conversion
Level: Beginner to Intermediate
"""

import random
import os
from colorama import Fore, Back, Style, init

# Kh·ªüi t·∫°o colorama
init(autoreset=True)

class QuizManager:
    def __init__(self):
        self.score = 0
        self.total_questions = 0
        self.current_question = 0
        
    def clear_screen(self):
        """Clear m√†n h√¨nh cho c·∫£ Windows v√† Unix"""
        os.system('cls' if os.name == 'nt' else 'clear')
    
    def display_header(self):
        """Hi·ªÉn th·ªã header ƒë·∫πp m·∫Øt"""
        print(Fore.CYAN + "=" * 60)
        print(Fore.YELLOW + Style.BRIGHT + "   üêç QUIZ T·ªîNG H·ª¢P NG√ÄY 3-4: BI·∫æN, S·ªê H·ªåC, STRING   ")
        print(Fore.CYAN + "=" * 60)
        print(Fore.WHITE + f"C√¢u h·ªèi: {self.current_question}/{self.total_questions} | " + 
              Fore.GREEN + f"ƒêi·ªÉm s·ªë: {self.score}")
        print(Fore.CYAN + "-" * 60)
    
    def ask_question(self, question, options, correct_answer, explanation=""):
        """H·ªèi m·ªôt c√¢u tr·∫Øc nghi·ªám"""
        self.clear_screen()
        self.current_question += 1
        self.display_header()
        
        print(Fore.WHITE + Style.BRIGHT + f"C√¢u {self.current_question}: {question}\n")
        
        # Hi·ªÉn th·ªã c√°c l·ª±a ch·ªçn
        for i, option in enumerate(options, 1):
            print(Fore.CYAN + f"{i}. {option}")
        
        # L·∫•y input t·ª´ user
        while True:
            try:
                print()
                user_input = input(Fore.YELLOW + "Ch·ªçn ƒë√°p √°n (1-4): ").strip()
                choice = int(user_input)
                if 1 <= choice <= 4:
                    break
                else:
                    print(Fore.RED + "Vui l√≤ng ch·ªçn s·ªë t·ª´ 1-4!")
            except ValueError:
                print(Fore.RED + "Vui l√≤ng nh·∫≠p s·ªë!")
        
        # Ki·ªÉm tra ƒë√°p √°n
        is_correct = choice == correct_answer
        if is_correct:
            self.score += 1
            print(Fore.GREEN + Style.BRIGHT + "\n‚úì CH√çNH X√ÅC!")
        else:
            print(Fore.RED + Style.BRIGHT + f"\n‚úó SAI R·ªíI! ƒê√°p √°n ƒë√∫ng l√†: {correct_answer}")
        
        if explanation:
            print(Fore.MAGENTA + f"üí° Gi·∫£i th√≠ch: {explanation}")
        
        input(Fore.YELLOW + "\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
    
    def show_final_score(self):
        """Hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi c√πng"""
        self.clear_screen()
        print(Fore.CYAN + "=" * 60)
        print(Fore.YELLOW + Style.BRIGHT + "           üéâ K·∫æT QU·∫¢ CU·ªêI C√ôNG üéâ")
        print(Fore.CYAN + "=" * 60)
        
        percentage = (self.score / self.total_questions) * 100
        print(Fore.WHITE + f"T·ªïng c√¢u h·ªèi: {self.total_questions}")
        print(Fore.GREEN + f"S·ªë c√¢u ƒë√∫ng: {self.score}")
        print(Fore.RED + f"S·ªë c√¢u sai: {self.total_questions - self.score}")
        print(Fore.YELLOW + f"Ph·∫ßn trƒÉm: {percentage:.1f}%")
        
        # X·∫øp lo·∫°i
        if percentage >= 90:
            grade = "XU·∫§T S·∫ÆC üèÜ"
            color = Fore.YELLOW
        elif percentage >= 80:
            grade = "GI·ªéI ü•á"
            color = Fore.GREEN
        elif percentage >= 70:
            grade = "KH√Å ü•à"
            color = Fore.CYAN
        elif percentage >= 60:
            grade = "TRUNG B√åNH ü•â"
            color = Fore.BLUE
        else:
            grade = "C·∫¶N C·ªê G·∫ÆNG üìö"
            color = Fore.RED
        
        print(color + Style.BRIGHT + f"\nX·∫øp lo·∫°i: {grade}")
        
        # G·ª£i √Ω c·∫£i thi·ªán
        if percentage < 70:
            print(Fore.MAGENTA + "\nüí° G·ª£i √Ω c·∫£i thi·ªán:")
            print("- √în l·∫°i l√Ω thuy·∫øt v·ªÅ bi·∫øn v√† ki·ªÉu d·ªØ li·ªáu")
            print("- Th·ª±c h√†nh th√™m c√°c ph√©p to√°n s·ªë h·ªçc")
            print("- L√†m quen v·ªõi c√°c method c·ªßa string")
            print("- Luy·ªán t·∫≠p type conversion an to√†n")

# T·∫°o quiz manager
quiz = QuizManager()

# BANK C√ÇU H·ªéI TR·∫ÆC NGHI·ªÜM
questions_bank = [
    # PH·∫¶N 1: BI·∫æN V√Ä KI·ªÇU D·ªÆ LI·ªÜU
    {
        "question": "C√°ch n√†o sau ƒë√¢y l√† ƒê√öNG ƒë·ªÉ khai b√°o bi·∫øn trong Python?",
        "options": [
            "var name = 'John'",
            "name = 'John'", 
            "String name = 'John'",
            "declare name = 'John'"
        ],
        "answer": 2,
        "explanation": "Python kh√¥ng c·∫ßn t·ª´ kh√≥a khai b√°o bi·∫øn, ch·ªâ c·∫ßn g√°n gi√° tr·ªã tr·ª±c ti·∫øp"
    },
    {
        "question": "Ki·ªÉu d·ªØ li·ªáu n√†o s·∫Ω ƒë∆∞·ª£c tr·∫£ v·ªÅ b·ªüi type(3.14)?",
        "options": ["int", "float", "double", "decimal"],
        "answer": 2,
        "explanation": "S·ªë th·∫≠p ph√¢n trong Python c√≥ ki·ªÉu d·ªØ li·ªáu float"
    },
    {
        "question": "Bi·∫øn n√†o sau ƒë√¢y c√≥ t√™n H·ª¢P L·ªÜ trong Python?",
        "options": ["2name", "_private_var", "class", "my-variable"],
        "answer": 2,
        "explanation": "_private_var h·ª£p l·ªá v√¨ b·∫Øt ƒë·∫ßu b·∫±ng underscore v√† ch·ªâ ch·ª©a k√Ω t·ª± cho ph√©p"
    },
    {
        "question": "K·∫øt qu·∫£ c·ªßa bool('') l√† g√¨?",
        "options": ["True", "False", "None", "Error"],
        "answer": 2,
        "explanation": "String r·ªóng ƒë∆∞·ª£c coi l√† False trong Python"
    },
    {
        "question": "C√°ch n√†o ƒë·ªÉ ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu c·ªßa bi·∫øn x?",
        "options": ["typeof(x)", "type(x)", "x.type()", "datatype(x)"],
        "answer": 2,
        "explanation": "type(x) l√† h√†m built-in ƒë·ªÉ ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu"
    },
    
    # PH·∫¶N 2: S·ªê H·ªåC V√Ä TO√ÅN T·ª¨
    {
        "question": "K·∫øt qu·∫£ c·ªßa 17 // 5 l√† g√¨?",
        "options": ["3.4", "3", "4", "3.0"],
        "answer": 2,
        "explanation": "// l√† ph√©p chia l·∫•y nguy√™n, 17 chia 5 ƒë∆∞·ª£c 3 d∆∞ 2"
    },
    {
        "question": "To√°n t·ª≠ ** trong Python d√πng ƒë·ªÉ l√†m g√¨?",
        "options": ["Nh√¢n ƒë√¥i", "L≈©y th·ª´a", "Nh√¢n", "Chia"],
        "answer": 2,
        "explanation": "** l√† to√°n t·ª≠ l≈©y th·ª´a, v√≠ d·ª• 2**3 = 8"
    },
    {
        "question": "K·∫øt qu·∫£ c·ªßa 10 % 3 l√† g√¨?",
        "options": ["3", "1", "0", "3.33"],
        "answer": 2,
        "explanation": "% l√† ph√©p chia l·∫•y d∆∞, 10 chia 3 ƒë∆∞·ª£c 3 d∆∞ 1"
    },
    {
        "question": "Th·ª© t·ª± ∆∞u ti√™n c·ªßa c√°c ph√©p to√°n: 2 + 3 * 4",
        "options": ["20", "14", "10", "Error"],
        "answer": 2,
        "explanation": "Nh√¢n c√≥ ∆∞u ti√™n cao h∆°n c·ªông: 2 + (3 * 4) = 2 + 12 = 14"
    },
    {
        "question": "K·∫øt qu·∫£ c·ªßa round(4.567, 2) l√† g√¨?",
        "options": ["4.56", "4.57", "5", "4.6"],
        "answer": 2,
        "explanation": "round(4.567, 2) l√†m tr√≤n ƒë·∫øn 2 ch·ªØ s·ªë th·∫≠p ph√¢n: 4.57"
    },
    
    # PH·∫¶N 3: X·ª¨ L√ù STRING
    {
        "question": "C√°ch n√†o ƒë·ªÉ l·∫•y k√Ω t·ª± ƒë·∫ßu ti√™n c·ªßa string 'Python'?",
        "options": ["'Python'[1]", "'Python'[0]", "'Python'.first()", "'Python'[-1]"],
        "answer": 2,
        "explanation": "Index trong Python b·∫Øt ƒë·∫ßu t·ª´ 0, n√™n [0] l√† k√Ω t·ª± ƒë·∫ßu ti√™n"
    },
    {
        "question": "K·∫øt qu·∫£ c·ªßa 'Hello' + ' ' + 'World' l√† g√¨?",
        "options": ["Hello World", "HelloWorld", "Hello+World", "Error"],
        "answer": 1,
        "explanation": "To√°n t·ª≠ + n·ªëi c√°c string l·∫°i v·ªõi nhau"
    },
    {
        "question": "Method n√†o ƒë·ªÉ chuy·ªÉn string th√†nh ch·ªØ HOA?",
        "options": ["capitalize()", "upper()", "title()", "swapcase()"],
        "answer": 2,
        "explanation": "upper() chuy·ªÉn t·∫•t c·∫£ k√Ω t·ª± th√†nh ch·ªØ HOA"
    },
    {
        "question": "K·∫øt qu·∫£ c·ªßa len('Python') l√† g√¨?",
        "options": ["5", "6", "7", "4"],
        "answer": 2,
        "explanation": "Python c√≥ 6 k√Ω t·ª±: P-y-t-h-o-n"
    },
    {
        "question": "'Python'[1:4] s·∫Ω tr·∫£ v·ªÅ g√¨?",
        "options": ["Pyt", "yth", "ytho", "tho"],
        "answer": 2,
        "explanation": "Slicing [1:4] l·∫•y t·ª´ index 1 ƒë·∫øn 3 (kh√¥ng bao g·ªìm 4): 'yth'"
    },
    
    # PH·∫¶N 4: TYPE CONVERSION
    {
        "question": "C√°ch n√†o ƒë·ªÉ chuy·ªÉn string '123' th√†nh integer?",
        "options": ["integer('123')", "int('123')", "to_int('123')", "'123'.int()"],
        "answer": 2,
        "explanation": "int() l√† h√†m built-in ƒë·ªÉ chuy·ªÉn ƒë·ªïi sang ki·ªÉu integer"
    },
    {
        "question": "K·∫øt qu·∫£ c·ªßa str(42) l√† g√¨?",
        "options": ["42", "'42'", "42.0", "Error"],
        "answer": 2,
        "explanation": "str(42) chuy·ªÉn s·ªë 42 th√†nh string '42'"
    },
    {
        "question": "float('3.14') s·∫Ω tr·∫£ v·ªÅ g√¨?",
        "options": ["3.14", "'3.14'", "3", "Error"],
        "answer": 1,
        "explanation": "float() chuy·ªÉn string s·ªë th√†nh ki·ªÉu float"
    },
    {
        "question": "ƒêi·ªÅu g√¨ x·∫£y ra khi int('hello')?",
        "options": ["0", "None", "ValueError", "'hello'"],
        "answer": 3,
        "explanation": "Kh√¥ng th·ªÉ chuy·ªÉn string kh√¥ng ph·∫£i s·ªë th√†nh int, s·∫Ω raise ValueError"
    },
    {
        "question": "K·∫øt qu·∫£ c·ªßa bool(0) l√† g√¨?",
        "options": ["True", "False", "0", "None"],
        "answer": 2,
        "explanation": "S·ªë 0 ƒë∆∞·ª£c coi l√† False trong Python"
    },
    
    # PH·∫¶N 5: ·ª®NG D·ª§NG T·ªîNG H·ª¢P
    {
        "question": "Code n√†o t√≠nh BMI ƒë√∫ng c√°ch? (BMI = weight / height¬≤)",
        "options": [
            "bmi = weight / height * 2",
            "bmi = weight / (height ** 2)",
            "bmi = weight * height ** 2", 
            "bmi = (weight / height) ** 2"
        ],
        "answer": 2,
        "explanation": "BMI = c√¢n n·∫∑ng chia cho b√¨nh ph∆∞∆°ng chi·ªÅu cao"
    },
    {
        "question": "C√°ch n√†o ƒë·ªÉ l·∫•y 3 k√Ω t·ª± cu·ªëi c·ªßa string?",
        "options": ["text[3:]", "text[-3:]", "text[:3]", "text[:-3]"],
        "answer": 2,
        "explanation": "[-3:] l·∫•y t·ª´ k√Ω t·ª± th·ª© 3 t·ª´ cu·ªëi ƒë·∫øn h·∫øt"
    },
    {
        "question": "Input validation an to√†n cho vi·ªác nh·∫≠p tu·ªïi:",
        "options": [
            "age = int(input())",
            "age = input().int()",
            "try: age = int(input()) except: age = 0",
            "age = input() if input().isdigit() else 0"
        ],
        "answer": 3,
        "explanation": "Try-except b·∫Øt ƒë∆∞·ª£c exception khi input kh√¥ng h·ª£p l·ªá"
    },
    {
        "question": "C√°ch format string v·ªõi f-string:",
        "options": [
            "f'T√™n: name, tu·ªïi: age'",
            "f'T√™n: {name}, tu·ªïi: {age}'",
            "'T√™n: {name}, tu·ªïi: {age}'.format()",
            "format('T√™n: name, tu·ªïi: age')"
        ],
        "answer": 2,
        "explanation": "F-string c·∫ßn d·∫•u {} ƒë·ªÉ ch√®n bi·∫øn v√†o chu·ªói"
    },
    {
        "question": "Method n√†o ki·ªÉm tra string ch·ªâ ch·ª©a s·ªë?",
        "options": ["isnumber()", "isdigit()", "isnumeric()", "C·∫£ B v√† C"],
        "answer": 4,
        "explanation": "C·∫£ isdigit() v√† isnumeric() ƒë·ªÅu ki·ªÉm tra string ch·ªâ ch·ª©a s·ªë"
    },
    
    # PH·∫¶N 6: TH√ÅCH TH·ª®C N√ÇNG CAO
    {
        "question": "K·∫øt qu·∫£ c·ªßa '5' * 3 l√† g√¨?",
        "options": ["15", "'555'", "Error", "'5' + '5' + '5'"],
        "answer": 2,
        "explanation": "To√°n t·ª≠ * v·ªõi string t·∫°o ra string l·∫∑p l·∫°i: '5' * 3 = '555'"
    },
    {
        "question": "C√°ch t·ªëi ∆∞u ƒë·ªÉ ƒë·∫£o ng∆∞·ª£c string?",
        "options": ["reverse(text)", "text.reverse()", "text[::-1]", "text[-1:0]"],
        "answer": 3,
        "explanation": "Slicing [::-1] l√† c√°ch pythonic ƒë·ªÉ ƒë·∫£o ng∆∞·ª£c string"
    },
    {
        "question": "Expression n√†o ki·ªÉm tra s·ªë ch·∫µn?",
        "options": ["x % 2", "x % 2 == 0", "x / 2 == int(x/2)", "even(x)"],
        "answer": 2,
        "explanation": "S·ªë ch·∫µn khi chia 2 c√≥ s·ªë d∆∞ b·∫±ng 0"
    },
    {
        "question": "C√°ch an to√†n nh·∫•t ƒë·ªÉ gh√©p nhi·ªÅu string?",
        "options": [
            "s1 + s2 + s3 + s4",
            "''.join([s1, s2, s3, s4])",
            "format(s1, s2, s3, s4)",
            "s1.append(s2, s3, s4)"
        ],
        "answer": 2,
        "explanation": "join() hi·ªáu qu·∫£ h∆°n khi gh√©p nhi·ªÅu string"
    },
    {
        "question": "Escape sequence n√†o t·∫°o xu·ªëng d√≤ng?",
        "options": ["\\t", "\\n", "\\r", "\\b"],
        "answer": 2,
        "explanation": "\\n (newline) t·∫°o xu·ªëng d√≤ng m·ªõi"
    }
]

def main_menu():
    """Menu ch√≠nh c·ªßa quiz"""
    quiz.clear_screen()
    print(Fore.CYAN + "=" * 60)
    print(Fore.YELLOW + Style.BRIGHT + "   üêç QUIZ T·ªîNG H·ª¢P NG√ÄY 3-4: BI·∫æN, S·ªê H·ªåC, STRING   ")
    print(Fore.CYAN + "=" * 60)
    print(Fore.WHITE + "\nCh·ªçn ch·∫ø ƒë·ªô quiz:")
    print(Fore.GREEN + "1. Quiz nhanh (10 c√¢u ng·∫´u nhi√™n)")
    print(Fore.YELLOW + "2. Quiz ƒë·∫ßy ƒë·ªß (20 c√¢u ng·∫´u nhi√™n)")
    print(Fore.RED + "3. Quiz ho√†n ch·ªânh (t·∫•t c·∫£ 30 c√¢u)")
    print(Fore.CYAN + "4. Quiz theo ch·ªß ƒë·ªÅ")
    print(Fore.MAGENTA + "0. Tho√°t")
    
    while True:
        try:
            choice = input(Fore.YELLOW + "\nCh·ªçn (0-4): ").strip()
            if choice in ['0', '1', '2', '3', '4']:
                return choice
            else:
                print(Fore.RED + "Vui l√≤ng ch·ªçn t·ª´ 0-4!")
        except:
            print(Fore.RED + "Input kh√¥ng h·ª£p l·ªá!")

def run_quiz(num_questions=None, topic_filter=None):
    """Ch·∫°y quiz v·ªõi s·ªë c√¢u h·ªèi x√°c ƒë·ªãnh"""
    available_questions = questions_bank.copy()
    
    if topic_filter:
        # L·ªçc theo ch·ªß ƒë·ªÅ n·∫øu c·∫ßn
        pass
    
    if num_questions:
        if num_questions > len(available_questions):
            num_questions = len(available_questions)
        selected_questions = random.sample(available_questions, num_questions)
    else:
        selected_questions = available_questions
    
    quiz.total_questions = len(selected_questions)
    quiz.score = 0
    quiz.current_question = 0
    
    # B·∫Øt ƒë·∫ßu quiz
    for q in selected_questions:
        quiz.ask_question(
            q["question"],
            q["options"], 
            q["answer"],
            q.get("explanation", "")
        )
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    quiz.show_final_score()

def topic_menu():
    """Menu ch·ªçn ch·ªß ƒë·ªÅ"""
    quiz.clear_screen()
    print(Fore.CYAN + "=" * 60)
    print(Fore.YELLOW + Style.BRIGHT + "           CH·ªåN CH·ª¶ ƒê·ªÄ QUIZ")
    print(Fore.CYAN + "=" * 60)
    print(Fore.WHITE + "\nC√°c ch·ªß ƒë·ªÅ c√≥ s·∫µn:")
    print(Fore.GREEN + "1. Bi·∫øn v√† ki·ªÉu d·ªØ li·ªáu (5 c√¢u)")
    print(Fore.YELLOW + "2. S·ªë h·ªçc v√† to√°n t·ª≠ (5 c√¢u)")
    print(Fore.CYAN + "3. X·ª≠ l√Ω string (5 c√¢u)")
    print(Fore.MAGENTA + "4. Type conversion (5 c√¢u)")
    print(Fore.BLUE + "5. ·ª®ng d·ª•ng t·ªïng h·ª£p (5 c√¢u)")
    print(Fore.RED + "6. Th√°ch th·ª©c n√¢ng cao (5 c√¢u)")
    print(Fore.WHITE + "0. Quay l·∫°i menu ch√≠nh")
    
    while True:
        try:
            choice = input(Fore.YELLOW + "\nCh·ªçn ch·ªß ƒë·ªÅ (0-6): ").strip()
            if choice == '0':
                return None
            elif choice in ['1', '2', '3', '4', '5', '6']:
                # L·∫•y 5 c√¢u ƒë·∫ßu c·ªßa m·ªói ch·ªß ƒë·ªÅ
                start_idx = (int(choice) - 1) * 5
                end_idx = start_idx + 5
                topic_questions = questions_bank[start_idx:end_idx]
                
                quiz.total_questions = len(topic_questions)
                quiz.score = 0
                quiz.current_question = 0
                
                for q in topic_questions:
                    quiz.ask_question(
                        q["question"],
                        q["options"],
                        q["answer"], 
                        q.get("explanation", "")
                    )
                
                quiz.show_final_score()
                return True
            else:
                print(Fore.RED + "Vui l√≤ng ch·ªçn t·ª´ 0-6!")
        except:
            print(Fore.RED + "Input kh√¥ng h·ª£p l·ªá!")

def main():
    """H√†m main ƒëi·ªÅu khi·ªÉn ch∆∞∆°ng tr√¨nh"""
    print(Fore.GREEN + "Kh·ªüi t·∫°o quiz system...")
    print(Fore.YELLOW + "ƒêang t·∫£i ng√¢n h√†ng c√¢u h·ªèi...")
    
    while True:
        choice = main_menu()
        
        if choice == '0':
            quiz.clear_screen()
            print(Fore.GREEN + Style.BRIGHT + "C·∫£m ∆°n b·∫°n ƒë√£ h·ªçc Python! üêç")
            print(Fore.CYAN + "H·∫πn g·∫∑p l·∫°i trong nh·ªØng b√†i h·ªçc ti·∫øp theo!")
            break
        elif choice == '1':
            run_quiz(10)
        elif choice == '2':
            run_quiz(20)
        elif choice == '3':
            run_quiz()  # T·∫•t c·∫£ c√¢u h·ªèi
        elif choice == '4':
            result = topic_menu()
            if result is None:
                continue
        
        # H·ªèi c√≥ mu·ªën ti·∫øp t·ª•c kh√¥ng
        print()
        continue_choice = input(Fore.YELLOW + "B·∫°n c√≥ mu·ªën l√†m quiz kh√°c kh√¥ng? (y/n): ").strip().lower()
        if continue_choice not in ['y', 'yes', 'c√≥', 'c']:
            quiz.clear_screen()
            print(Fore.GREEN + Style.BRIGHT + "C·∫£m ∆°n b·∫°n ƒë√£ h·ªçc Python! üêç")
            print(Fore.CYAN + "H·∫πn g·∫∑p l·∫°i trong nh·ªØng b√†i h·ªçc ti·∫øp theo!")
            break

if __name__ == "__main__":
    main() 
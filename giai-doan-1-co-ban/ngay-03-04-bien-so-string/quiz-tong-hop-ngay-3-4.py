# Quiz T·ªïng H·ª£p Ng√†y 3-4
# Bi·∫øn, S·ªë H·ªçc, String v√† Type Conversion

print("=== QUIZ T·ªîNG H·ª¢P NG√ÄY 3-4 ===")
print("Bi·∫øn - S·ªë H·ªçc - String - Type Conversion")
print("=" * 50)

import random

# PH·∫¶N 1: TR·∫ÆC NGHI·ªÜM (50 C√ÇU)
print("\nPH·∫¶N 1: TR·∫ÆC NGHI·ªÜM (50 C√ÇU)")
print("=" * 50)

# Nh√≥m c√¢u h·ªèi v·ªÅ BI·∫æN
print("\nüìù NH√ìM A: BI·∫æN V√Ä KI·ªÇU D·ªÆ LI·ªÜU (C√¢u 1-12)")

questions = []
correct_answers = []

# C√¢u 1
print("\nC√¢u 1: T√™n bi·∫øn n√†o sau ƒë√¢y KH√îNG h·ª£p l·ªá?")
print("A) ten_hoc_sinh    B) 2name    C) _private    D) TenHocSinh")
questions.append("B")
correct_answers.append("B")

# C√¢u 2
print("\nC√¢u 2: type(3.14) tr·∫£ v·ªÅ g√¨?")
print("A) <class 'int'>    B) <class 'float'>    C) <class 'str'>    D) <class 'decimal'>")
questions.append("B")
correct_answers.append("B")

# C√¢u 3
a, b = 5, 3
print(f"\nC√¢u 3: Cho a = {a}, b = {b}. Sau l·ªánh a, b = b, a th√¨ a = ?")
print(f"A) {a}    B) {b}    C) 8    D) 0")
questions.append("B")
correct_answers.append("B")

# C√¢u 4
print("\nC√¢u 4: H·∫±ng s·ªë trong Python th∆∞·ªùng ƒë∆∞·ª£c vi·∫øt nh∆∞ th·∫ø n√†o?")
print("A) pi = 3.14    B) PI = 3.14    C) Pi = 3.14    D) pI = 3.14")
questions.append("B")
correct_answers.append("B")

# Nh√≥m c√¢u h·ªèi v·ªÅ S·ªê H·ªåC
print("\nüî¢ NH√ìM B: S·ªê H·ªåC V√Ä PH√âP TO√ÅN (C√¢u 5-20)")

# C√¢u 5
result = 2 + 3 * 4
print(f"\nC√¢u 5: 2 + 3 * 4 = ?")
print(f"A) 20    B) {result}    C) 24    D) 11")
questions.append("B")
correct_answers.append("B")

# C√¢u 6
result = 17 // 5
print(f"\nC√¢u 6: 17 // 5 = ?")
print(f"A) 3.4    B) {result}    C) 4    D) 2")
questions.append("B")
correct_answers.append("B")

# C√¢u 7
result = 17 % 5
print(f"\nC√¢u 7: 17 % 5 = ?")
print(f"A) 3    B) {result}    C) 12    D) 5")
questions.append("B")
correct_answers.append("B")

# C√¢u 8
result = 2 ** 3
print(f"\nC√¢u 8: 2 ** 3 = ?")
print(f"A) 6    B) {result}    C) 9    D) 23")
questions.append("B")
correct_answers.append("B")

# C√¢u 9
result = abs(-7)
print(f"\nC√¢u 9: abs(-7) = ?")
print(f"A) -7    B) {result}    C) 0    D) 14")
questions.append("B")
correct_answers.append("B")

# C√¢u 10
result = round(3.7)
print(f"\nC√¢u 10: round(3.7) = ?")
print(f"A) 3    B) {result}    C) 3.7    D) 3.0")
questions.append("B")
correct_answers.append("B")

# Nh√≥m c√¢u h·ªèi v·ªÅ STRING
print("\nüìù NH√ìM C: STRING (C√¢u 11-30)")

# C√¢u 11
text = "Python"
print(f"\nC√¢u 11: len('Python') = ?")
print(f"A) 5    B) {len(text)}    C) 7    D) 8")
questions.append("B")
correct_answers.append("B")

# C√¢u 12
print(f"\nC√¢u 12: 'Python'[0] = ?")
print(f"A) 'P'    B) '{text[0]}'    C) 'y'    D) 0")
questions.append("B")
correct_answers.append("B")

# C√¢u 13
print(f"\nC√¢u 13: 'Python'[-1] = ?")
print(f"A) 'P'    B) '{text[-1]}'    C) -1    D) 'o'")
questions.append("B")
correct_answers.append("B")

# C√¢u 14
result = text.upper()
print(f"\nC√¢u 14: 'Python'.upper() = ?")
print(f"A) 'python'    B) '{result}'    C) 'Python'    D) 'pYTHON'")
questions.append("B")
correct_answers.append("B")

# C√¢u 15
result = text.find('t')
print(f"\nC√¢u 15: 'Python'.find('t') = ?")
print(f"A) 1    B) {result}    C) 3    D) -1")
questions.append("B")
correct_answers.append("B")

# C√¢u 16
result = text.count('y')
print(f"\nC√¢u 16: 'Python'.count('y') = ?")
print(f"A) 0    B) {result}    C) 2    D) 3")
questions.append("B")
correct_answers.append("B")

# C√¢u 17
result = "hello world".split()
print(f"\nC√¢u 17: 'hello world'.split() tr·∫£ v·ªÅ g√¨?")
print(f"A) 'hello world'    B) {result}    C) ['hello', 'world']    D) 'hello', 'world'")
questions.append("B")
correct_answers.append("B")

# C√¢u 18
result = "-".join(['a', 'b', 'c'])
print(f"\nC√¢u 18: '-'.join(['a', 'b', 'c']) = ?")
print(f"A) 'abc'    B) '{result}'    C) ['a-b-c']    D) 'a b c'")
questions.append("B")
correct_answers.append("B")

# Nh√≥m c√¢u h·ªèi v·ªÅ TYPE CONVERSION
print("\nüîÑ NH√ìM D: CHUY·ªÇN ƒê·ªîI KI·ªÇU (C√¢u 19-30)")

# C√¢u 19
result = int("123")
print(f"\nC√¢u 19: int('123') = ?")
print(f"A) '123'    B) {result}    C) 123.0    D) L·ªói")
questions.append("B")
correct_answers.append("B")

# C√¢u 20
result = float("3.14")
print(f"\nC√¢u 20: float('3.14') = ?")
print(f"A) 3    B) {result}    C) '3.14'    D) 3.14.0")
questions.append("B")
correct_answers.append("B")

# C√¢u 21
result = str(42)
print(f"\nC√¢u 21: str(42) = ?")
print(f"A) 42    B) '{result}'    C) 42.0    D) [42]")
questions.append("B")
correct_answers.append("B")

# C√¢u 22
result = int(7.9)
print(f"\nC√¢u 22: int(7.9) = ?")
print(f"A) 8    B) {result}    C) 7.9    D) L·ªói")
questions.append("B")
correct_answers.append("B")

# C√¢u 23
result = bool("")
print(f"\nC√¢u 23: bool('') = ?")
print(f"A) True    B) {result}    C) ''    D) L·ªói")
questions.append("B")
correct_answers.append("B")

# C√¢u 24
result = bool("hello")
print(f"\nC√¢u 24: bool('hello') = ?")
print(f"A) False    B) {result}    C) 'hello'    D) L·ªói")
questions.append("B")
correct_answers.append("B")

# C√ÇU H·ªéI N√ÇNG CAO
print("\nüöÄ NH√ìM E: C√ÇU H·ªéI N√ÇNG CAO (C√¢u 25-30)")

# C√¢u 25
name = "Nguyen Van An"
initials = "".join([word[0] for word in name.split()])
print(f"\nC√¢u 25: Code sau t·∫°o ra g√¨ t·ª´ 'Nguyen Van An'?")
print("name.split() ‚Üí [word[0] for word in ...] ‚Üí ''.join(...)")
print(f"A) 'Nguyen'    B) '{initials}'    C) ['N', 'V', 'A']    D) 'An'")
questions.append("B")
correct_answers.append("B")

# C√¢u 26
x = 10
x += 5
x *= 2
print(f"\nC√¢u 26: Cho x = 10. Sau x += 5 v√† x *= 2 th√¨ x = ?")
print(f"A) 25    B) {x}    C) 20    D) 100")
questions.append("B")
correct_answers.append("B")

# C√¢u 27
text = "Programming"
result = text[2:7]
print(f"\nC√¢u 27: 'Programming'[2:7] = ?")
print(f"A) 'ogram'    B) '{result}'    C) 'ramm'    D) 'gram'")
questions.append("B")
correct_answers.append("B")

# C√¢u 28
text = "hello"
result = text[::-1]
print(f"\nC√¢u 28: 'hello'[::-1] = ?")
print(f"A) 'hello'    B) '{result}'    C) 'h'    D) 'o'")
questions.append("B")
correct_answers.append("B")

# C√¢u 29
price = 1234567
formatted = f"{price:,}"
print(f"\nC√¢u 29: f'{price:,}' t·∫°o ra string n√†o?")
print(f"A) '1234567'    B) '{formatted}'    C) '1.234.567'    D) '1_234_567'")
questions.append("B")
correct_answers.append("B")

# C√¢u 30
result = "Python" in "I love Python programming"
print(f"\nC√¢u 30: 'Python' in 'I love Python programming' = ?")
print(f"A) False    B) {result}    C) 'Python'    D) 6")
questions.append("B")
correct_answers.append("B")

# PH·∫¶N 2: T·ª∞ LU·∫¨N
print("\n" + "="*50)
print("PH·∫¶N 2: C√ÇU H·ªéI T·ª∞ LU·∫¨N")
print("="*50)

print("\nüìù B√†i 1: Vi·∫øt code t√≠nh BMI")
print("Y√™u c·∫ßu:")
print("- Khai b√°o bi·∫øn c√¢n n·∫∑ng v√† chi·ªÅu cao")
print("- T√≠nh BMI = c√¢n n·∫∑ng / (chi·ªÅu cao^2)")
print("- In k·∫øt qu·∫£ v·ªõi 2 ch·ªØ s·ªë th·∫≠p ph√¢n")
print("\nL·ªùi gi·∫£i m·∫´u:")
print("```python")
print("can_nang = 65  # kg")
print("chieu_cao = 1.70  # m")
print("bmi = can_nang / (chieu_cao ** 2)")
print("print(f'BMI: {bmi:.2f}')")
print("```")

print("\nüìù B√†i 2: X·ª≠ l√Ω chu·ªói h·ªç t√™n")
print("Y√™u c·∫ßu:")
print("- Cho string: '  nGuYeN    vAn     aN  '")
print("- Chu·∫©n h√≥a th√†nh 'Nguyen Van An'")
print("- T·∫°o ch·ªØ c√°i ƒë·∫ßu 'NVA'")
print("\nL·ªùi gi·∫£i m·∫´u:")
print("```python")
print("ten_tho = '  nGuYeN    vAn     aN  '")
print("ten_chuan = ' '.join(ten_tho.strip().split()).title()")
print("chu_cai_dau = ''.join([word[0] for word in ten_chuan.split()])")
print("print(f'T√™n chu·∫©n: {ten_chuan}')")
print("print(f'Ch·ªØ c√°i ƒë·∫ßu: {chu_cai_dau}')")
print("```")

print("\nüìù B√†i 3: Chuy·ªÉn ƒë·ªïi nhi·ªát ƒë·ªô")
print("Y√™u c·∫ßu:")
print("- Nh·∫≠n nhi·ªát ƒë·ªô Celsius t·ª´ string")
print("- Chuy·ªÉn sang Fahrenheit v√† Kelvin")
print("- X·ª≠ l√Ω l·ªói n·∫øu input kh√¥ng h·ª£p l·ªá")
print("\nL·ªùi gi·∫£i m·∫´u:")
print("```python")
print("celsius_str = '25'")
print("try:")
print("    celsius = float(celsius_str)")
print("    fahrenheit = celsius * 9/5 + 32")
print("    kelvin = celsius + 273.15")
print("    print(f'{celsius}¬∞C = {fahrenheit}¬∞F = {kelvin}K')")
print("except ValueError:")
print("    print('Nhi·ªát ƒë·ªô kh√¥ng h·ª£p l·ªá')")
print("```")

print("\nüìù B√†i 4: T√≠nh ti·ªÅn mua h√†ng")
print("Y√™u c·∫ßu:")
print("- √Åo: 250,000 VND x 2 c√°i")
print("- Qu·∫ßn: 180,000 VND x 1 c√°i") 
print("- Gi·∫£m gi√° 15%")
print("- T√≠nh t·ªïng ti·ªÅn ph·∫£i tr·∫£")
print("\nL·ªùi gi·∫£i m·∫´u:")
print("```python")
print("gia_ao, so_luong_ao = 250000, 2")
print("gia_quan, so_luong_quan = 180000, 1")
print("giam_gia = 15  # %")
print("")
print("tong_tien = (gia_ao * so_luong_ao) + (gia_quan * so_luong_quan)")
print("tien_giam = tong_tien * giam_gia / 100")
print("phai_tra = tong_tien - tien_giam")
print("")
print("print(f'T·ªïng ti·ªÅn: {tong_tien:,} VND')")
print("print(f'Gi·∫£m {giam_gia}%: -{tien_giam:,} VND')")
print("print(f'Ph·∫£i tr·∫£: {phai_tra:,} VND')")
print("```")

print("\nüìù B√†i 5: Ph√¢n t√≠ch vƒÉn b·∫£n")
print("Y√™u c·∫ßu:")
print("- Cho string: 'Python is awesome. Python is easy!'")
print("- ƒê·∫øm s·ªë t·ª´, s·ªë k√Ω t·ª± (kh√¥ng t√≠nh space)")
print("- T√¨m t·ª´ 'Python' xu·∫•t hi·ªán bao nhi√™u l·∫ßn")
print("\nL·ªùi gi·∫£i m·∫´u:")
print("```python")
print("text = 'Python is awesome. Python is easy!'")
print("words = text.split()")
print("so_tu = len(words)")
print("so_ky_tu = len(text.replace(' ', ''))")
print("so_lan_python = text.count('Python')")
print("")
print("print(f'S·ªë t·ª´: {so_tu}')")
print("print(f'S·ªë k√Ω t·ª±: {so_ky_tu}')")
print("print(f'Python xu·∫•t hi·ªán: {so_lan_python} l·∫ßn')")
print("```")

# PH·∫¶N 3: TH√ÅCH TH·ª®C
print("\n" + "="*50)
print("PH·∫¶N 3: B√ÄI T·∫¨P TH√ÅCH TH·ª®C")
print("="*50)

print("\nüèÜ Th√°ch th·ª©c 1: T·∫°o m·∫≠t kh·∫©u th√¥ng minh")
print("Y√™u c·∫ßu:")
print("- Input: H·ªç t√™n, nƒÉm sinh, s·ªü th√≠ch")
print("- Output: M·∫≠t kh·∫©u format: [Ch·ªØ c√°i ƒë·∫ßu][NƒÉm][3 k√Ω t·ª± ƒë·∫ßu s·ªü th√≠ch]!")
print("- VD: 'Nguyen Van An', 2005, 'Python' ‚Üí 'NVA2005Pyt!'")

print("\nüèÜ Th√°ch th·ª©c 2: Validation d·ªØ li·ªáu h·ªçc sinh")
print("Y√™u c·∫ßu:")
print("- Input: 'T√™n,Tu·ªïi,ƒêi·ªÉm'")
print("- Ki·ªÉm tra tu·ªïi (15-25), ƒëi·ªÉm (0-10)")
print("- Chu·∫©n h√≥a t√™n (Title case)")
print("- B√°o l·ªói n·∫øu d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá")

print("\nüèÜ Th√°ch th·ª©c 3: M√°y t√≠nh string")
print("Y√™u c·∫ßu:")
print("- Input: '10 + 5' (d·∫°ng string)")
print("- Parse v√† t√≠nh to√°n")
print("- H·ªó tr·ª£ +, -, *, /")
print("- X·ª≠ l√Ω l·ªói v√† edge cases")

# B·∫¢NG ƒê√ÅP √ÅN
print("\n" + "="*50)
print("B·∫¢NG ƒê√ÅP √ÅN TR·∫ÆC NGHI·ªÜM")
print("="*50)

print("\nƒê√°p √°n c√°c c√¢u tr·∫Øc nghi·ªám:")
for i in range(1, min(31, len(correct_answers) + 1)):
    if i <= len(correct_answers):
        print(f"C√¢u {i}: {correct_answers[i-1]}")

# TH·ªêNG K√ä KI·∫æN TH·ª®C
print("\n" + "="*50)
print("T·ªîNG K·∫æT KI·∫æN TH·ª®C NG√ÄY 3-4")
print("="*50)

print("\n‚úÖ B·∫†N ƒê√É H·ªåC ƒê∆Ø·ª¢C:")
print("1. BI·∫æN:")
print("   - Khai b√°o, g√°n, ƒë·ªïi t√™n")
print("   - Ki·ªÉu d·ªØ li·ªáu: int, float, str, bool")
print("   - Quy t·∫Øc ƒë·∫∑t t√™n")

print("\n2. S·ªê H·ªåC:")
print("   - T·∫•t c·∫£ ph√©p to√°n: +, -, *, /, //, %, **")
print("   - Th·ª© t·ª± ∆∞u ti√™n")
print("   - H√†m to√°n h·ªçc: abs(), round(), min(), max()")

print("\n3. STRING:")
print("   - T·∫°o, n·ªëi, format (f-string)")
print("   - Methods: upper(), lower(), find(), count(), split(), join()")
print("   - Slicing: [start:end:step]")

print("\n4. TYPE CONVERSION:")
print("   - int(), float(), str(), bool()")
print("   - X·ª≠ l√Ω l·ªói ValueError")
print("   - Validation an to√†n")

print("\nüìä ƒêI·ªÇM ƒê√ÅNH GI√Å:")
print("- C∆° b·∫£n (0-15 c√¢u ƒë√∫ng): C·∫ßn √¥n l·∫°i")
print("- Kh√° (16-22 c√¢u ƒë√∫ng): T·ªët, ti·∫øp t·ª•c")
print("- Gi·ªèi (23-27 c√¢u ƒë√∫ng): R·∫•t t·ªët")
print("- Xu·∫•t s·∫Øc (28-30 c√¢u ƒë√∫ng): Ho√†n h·∫£o!")

print("\nüéØ CHU·∫®N B·ªä CHO NG√ÄY 5-6:")
print("- √în l·∫°i boolean (True/False)")
print("- T√¨m hi·ªÉu so s√°nh (==, !=, <, >)")
print("- Th·ª±c h√†nh logic (and, or, not)")

print("\n" + "="*50)
print("CH√öC B·∫†N H·ªåC T·∫¨P T·ªêT!")
print("="*50) 